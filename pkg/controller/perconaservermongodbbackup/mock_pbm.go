// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/psmdb/backup/pbm.go

// Package perconaservermongodbbackup is a generated GoMock package.
package perconaservermongodbbackup

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backup "github.com/percona/percona-backup-mongodb/pbm/backup"
	config "github.com/percona/percona-backup-mongodb/pbm/config"
	ctrl "github.com/percona/percona-backup-mongodb/pbm/ctrl"
	log "github.com/percona/percona-backup-mongodb/pbm/log"
	oplog "github.com/percona/percona-backup-mongodb/pbm/oplog"
	restore "github.com/percona/percona-backup-mongodb/pbm/restore"
	storage "github.com/percona/percona-backup-mongodb/pbm/storage"
	v1 "github.com/percona/percona-server-mongodb-operator/pkg/apis/psmdb/v1"
	backup0 "github.com/percona/percona-server-mongodb-operator/pkg/psmdb/backup"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockPBM is a mock of PBM interface.
type MockPBM struct {
	ctrl     *gomock.Controller
	recorder *MockPBMMockRecorder
}

// MockPBMMockRecorder is the mock recorder for MockPBM.
type MockPBMMockRecorder struct {
	mock *MockPBM
}

// NewMockPBM creates a new mock instance.
func NewMockPBM(ctrl *gomock.Controller) *MockPBM {
	mock := &MockPBM{ctrl: ctrl}
	mock.recorder = &MockPBMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPBM) EXPECT() *MockPBMMockRecorder {
	return m.recorder
}

// AddProfile mocks base method.
func (m *MockPBM) AddProfile(ctx context.Context, k8sclient client.Client, cluster *v1.PerconaServerMongoDB, name string, stg v1.BackupStorageSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", ctx, k8sclient, cluster, name, stg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfile indicates an expected call of AddProfile.
func (mr *MockPBMMockRecorder) AddProfile(ctx, k8sclient, cluster, name, stg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockPBM)(nil).AddProfile), ctx, k8sclient, cluster, name, stg)
}

// Close mocks base method.
func (m *MockPBM) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPBMMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPBM)(nil).Close), ctx)
}

// Conn mocks base method.
func (m *MockPBM) Conn() *mongo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*mongo.Client)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockPBMMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockPBM)(nil).Conn))
}

// DeleteBackup mocks base method.
func (m *MockPBM) DeleteBackup(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockPBMMockRecorder) DeleteBackup(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockPBM)(nil).DeleteBackup), ctx, name)
}

// DeletePITRChunks mocks base method.
func (m *MockPBM) DeletePITRChunks(ctx context.Context, until primitive.Timestamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePITRChunks", ctx, until)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePITRChunks indicates an expected call of DeletePITRChunks.
func (mr *MockPBMMockRecorder) DeletePITRChunks(ctx, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePITRChunks", reflect.TypeOf((*MockPBM)(nil).DeletePITRChunks), ctx, until)
}

// GetBackupMeta mocks base method.
func (m *MockPBM) GetBackupMeta(ctx context.Context, bcpName string) (*backup.BackupMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupMeta", ctx, bcpName)
	ret0, _ := ret[0].(*backup.BackupMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupMeta indicates an expected call of GetBackupMeta.
func (mr *MockPBMMockRecorder) GetBackupMeta(ctx, bcpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupMeta", reflect.TypeOf((*MockPBM)(nil).GetBackupMeta), ctx, bcpName)
}

// GetConfig mocks base method.
func (m *MockPBM) GetConfig(ctx context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockPBMMockRecorder) GetConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockPBM)(nil).GetConfig), ctx)
}

// GetConfigVar mocks base method.
func (m *MockPBM) GetConfigVar(ctx context.Context, key string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigVar", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigVar indicates an expected call of GetConfigVar.
func (mr *MockPBMMockRecorder) GetConfigVar(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigVar", reflect.TypeOf((*MockPBM)(nil).GetConfigVar), ctx, key)
}

// GetLatestTimelinePITR mocks base method.
func (m *MockPBM) GetLatestTimelinePITR(ctx context.Context) (oplog.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTimelinePITR", ctx)
	ret0, _ := ret[0].(oplog.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTimelinePITR indicates an expected call of GetLatestTimelinePITR.
func (mr *MockPBMMockRecorder) GetLatestTimelinePITR(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTimelinePITR", reflect.TypeOf((*MockPBM)(nil).GetLatestTimelinePITR), ctx)
}

// GetNSetConfig mocks base method.
func (m *MockPBM) GetNSetConfig(ctx context.Context, k8sclient client.Client, cluster *v1.PerconaServerMongoDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNSetConfig", ctx, k8sclient, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNSetConfig indicates an expected call of GetNSetConfig.
func (mr *MockPBMMockRecorder) GetNSetConfig(ctx, k8sclient, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNSetConfig", reflect.TypeOf((*MockPBM)(nil).GetNSetConfig), ctx, k8sclient, cluster)
}

// GetNSetConfigLegacy mocks base method.
func (m *MockPBM) GetNSetConfigLegacy(ctx context.Context, k8sclient client.Client, cluster *v1.PerconaServerMongoDB, stg v1.BackupStorageSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNSetConfigLegacy", ctx, k8sclient, cluster, stg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNSetConfigLegacy indicates an expected call of GetNSetConfigLegacy.
func (mr *MockPBMMockRecorder) GetNSetConfigLegacy(ctx, k8sclient, cluster, stg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNSetConfigLegacy", reflect.TypeOf((*MockPBM)(nil).GetNSetConfigLegacy), ctx, k8sclient, cluster, stg)
}

// GetPITRChunkContains mocks base method.
func (m *MockPBM) GetPITRChunkContains(ctx context.Context, unixTS int64) (*oplog.OplogChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPITRChunkContains", ctx, unixTS)
	ret0, _ := ret[0].(*oplog.OplogChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPITRChunkContains indicates an expected call of GetPITRChunkContains.
func (mr *MockPBMMockRecorder) GetPITRChunkContains(ctx, unixTS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPITRChunkContains", reflect.TypeOf((*MockPBM)(nil).GetPITRChunkContains), ctx, unixTS)
}

// GetProfile mocks base method.
func (m *MockPBM) GetProfile(ctx context.Context, name string) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, name)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockPBMMockRecorder) GetProfile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockPBM)(nil).GetProfile), ctx, name)
}

// GetRestoreMeta mocks base method.
func (m *MockPBM) GetRestoreMeta(ctx context.Context, name string) (*restore.RestoreMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreMeta", ctx, name)
	ret0, _ := ret[0].(*restore.RestoreMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreMeta indicates an expected call of GetRestoreMeta.
func (mr *MockPBMMockRecorder) GetRestoreMeta(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreMeta", reflect.TypeOf((*MockPBM)(nil).GetRestoreMeta), ctx, name)
}

// GetStorage mocks base method.
func (m *MockPBM) GetStorage(ctx context.Context, e log.LogEvent) (storage.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", ctx, e)
	ret0, _ := ret[0].(storage.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockPBMMockRecorder) GetStorage(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockPBM)(nil).GetStorage), ctx, e)
}

// HasLocks mocks base method.
func (m *MockPBM) HasLocks(ctx context.Context, predicates ...backup0.LockHeaderPredicate) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasLocks", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLocks indicates an expected call of HasLocks.
func (mr *MockPBMMockRecorder) HasLocks(ctx interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLocks", reflect.TypeOf((*MockPBM)(nil).HasLocks), varargs...)
}

// Logger mocks base method.
func (m *MockPBM) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockPBMMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockPBM)(nil).Logger))
}

// Node mocks base method.
func (m *MockPBM) Node(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockPBMMockRecorder) Node(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockPBM)(nil).Node), ctx)
}

// PITRChunksCollection mocks base method.
func (m *MockPBM) PITRChunksCollection() *mongo.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PITRChunksCollection")
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// PITRChunksCollection indicates an expected call of PITRChunksCollection.
func (mr *MockPBMMockRecorder) PITRChunksCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PITRChunksCollection", reflect.TypeOf((*MockPBM)(nil).PITRChunksCollection))
}

// PITRGetChunksSlice mocks base method.
func (m *MockPBM) PITRGetChunksSlice(ctx context.Context, rs string, from, to primitive.Timestamp) ([]oplog.OplogChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PITRGetChunksSlice", ctx, rs, from, to)
	ret0, _ := ret[0].([]oplog.OplogChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PITRGetChunksSlice indicates an expected call of PITRGetChunksSlice.
func (mr *MockPBMMockRecorder) PITRGetChunksSlice(ctx, rs, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PITRGetChunksSlice", reflect.TypeOf((*MockPBM)(nil).PITRGetChunksSlice), ctx, rs, from, to)
}

// RemoveProfile mocks base method.
func (m *MockPBM) RemoveProfile(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProfile", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProfile indicates an expected call of RemoveProfile.
func (mr *MockPBMMockRecorder) RemoveProfile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProfile", reflect.TypeOf((*MockPBM)(nil).RemoveProfile), ctx, name)
}

// ResyncMainStorage mocks base method.
func (m *MockPBM) ResyncMainStorage(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncMainStorage", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncMainStorage indicates an expected call of ResyncMainStorage.
func (mr *MockPBMMockRecorder) ResyncMainStorage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncMainStorage", reflect.TypeOf((*MockPBM)(nil).ResyncMainStorage), ctx)
}

// ResyncMainStorageAndWait mocks base method.
func (m *MockPBM) ResyncMainStorageAndWait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncMainStorageAndWait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncMainStorageAndWait indicates an expected call of ResyncMainStorageAndWait.
func (mr *MockPBMMockRecorder) ResyncMainStorageAndWait(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncMainStorageAndWait", reflect.TypeOf((*MockPBM)(nil).ResyncMainStorageAndWait), ctx)
}

// ResyncProfile mocks base method.
func (m *MockPBM) ResyncProfile(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncProfile", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncProfile indicates an expected call of ResyncProfile.
func (mr *MockPBMMockRecorder) ResyncProfile(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncProfile", reflect.TypeOf((*MockPBM)(nil).ResyncProfile), ctx, name)
}

// ResyncProfileAndWait mocks base method.
func (m *MockPBM) ResyncProfileAndWait(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncProfileAndWait", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncProfileAndWait indicates an expected call of ResyncProfileAndWait.
func (mr *MockPBMMockRecorder) ResyncProfileAndWait(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncProfileAndWait", reflect.TypeOf((*MockPBM)(nil).ResyncProfileAndWait), ctx, name)
}

// SendCmd mocks base method.
func (m *MockPBM) SendCmd(ctx context.Context, cmd ctrl.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCmd", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCmd indicates an expected call of SendCmd.
func (mr *MockPBMMockRecorder) SendCmd(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCmd", reflect.TypeOf((*MockPBM)(nil).SendCmd), ctx, cmd)
}

// SetConfig mocks base method.
func (m *MockPBM) SetConfig(ctx context.Context, cfg *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockPBMMockRecorder) SetConfig(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockPBM)(nil).SetConfig), ctx, cfg)
}

// SetConfigVar mocks base method.
func (m *MockPBM) SetConfigVar(ctx context.Context, key, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigVar", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigVar indicates an expected call of SetConfigVar.
func (mr *MockPBMMockRecorder) SetConfigVar(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigVar", reflect.TypeOf((*MockPBM)(nil).SetConfigVar), ctx, key, val)
}

// ValidateBackup mocks base method.
func (m *MockPBM) ValidateBackup(ctx context.Context, cfg *config.Config, bcp *v1.PerconaServerMongoDBBackup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBackup", ctx, cfg, bcp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBackup indicates an expected call of ValidateBackup.
func (mr *MockPBMMockRecorder) ValidateBackup(ctx, cfg, bcp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackup", reflect.TypeOf((*MockPBM)(nil).ValidateBackup), ctx, cfg, bcp)
}
