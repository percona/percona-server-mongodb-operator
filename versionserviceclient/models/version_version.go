// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionVersion Version represents product version information.
//
// swagger:model versionVersion
type VersionVersion struct {

	// critical
	Critical bool `json:"critical,omitempty"`

	// image hash
	ImageHash string `json:"imageHash,omitempty"`

	// image hash arm64
	ImageHashArm64 string `json:"imageHashArm64,omitempty"`

	// image path
	ImagePath string `json:"imagePath,omitempty"`

	// release_timestamp is the release time of this image.
	// Format: date-time
	ImageReleaseTimestamp strfmt.DateTime `json:"imageReleaseTimestamp,omitempty"`

	// status
	Status VersionStatus `json:"status,omitempty"`
}

// Validate validates this version version
func (m *VersionVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageReleaseTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionVersion) validateImageReleaseTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageReleaseTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("imageReleaseTimestamp", "body", "date-time", m.ImageReleaseTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionVersion) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionVersion) UnmarshalBinary(b []byte) error {
	var res VersionVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
