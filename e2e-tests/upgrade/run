#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

cluster='upgrade'
CLUSTER_SIZE=3
TARGET_OPERATOR_VER="${OPERATOR_VERSION}"
TARGET_IMAGE="${IMAGE}"
TARGET_IMAGE_MONGOD="${IMAGE_MONGOD}"
TARGET_IMAGE_PMM="${IMAGE_PMM}"
TARGET_IMAGE_BACKUP="${IMAGE_BACKUP}"
FULL_VER=$(get_mongod_ver_from_image ${TARGET_IMAGE_MONGOD})
MONGO_VER=${FULL_VER:0:3}

INIT_OPERATOR_VER=$(curl -s https://check.percona.com/versions/v1/psmdb-operator \
	| jq -r '.versions[].operator' | sort -V | tail -n1)
# if testing on release branch and version service is already updated with new operator images
# use the older version of operator as initial point for test
if [[ ${INIT_OPERATOR_VER} == "${TARGET_OPERATOR_VER}" ]]; then
	INIT_OPERATOR_VER=$(curl -s https://check.percona.com/versions/v1/psmdb-operator \
		| jq -r '.versions[].operator' | sort -V | tail -n2 | head -n1)
fi
GIT_TAG="v${INIT_OPERATOR_VER}"

case $(curl -s -o /dev/null -w "%{http_code}" 'https://check.percona.com/versions/v1/psmdb-operator/'${INIT_OPERATOR_VER}'/latest?databaseVersion='${MONGO_VER}'') in
	'200')
		INIT_OPERATOR_IMAGES=$(curl -s "https://check.percona.com/versions/v1/psmdb-operator/${INIT_OPERATOR_VER}/latest?databaseVersion=${MONGO_VER}")
		;;
	'404')
		desc 'No latest mongod '${MONGO_VER}' for operator '${INIT_OPERATOR_VER}' found. Exiting...'
		exit 0
		;;
	*)
		desc 'Unable to get latest '${MONGO_VER}' for operator '${INIT_OPERATOR_VER}'. Try again later.'
		exit 1
		;;
esac

OPERATOR_NAME='percona-server-mongodb-operator'

IMAGE=$(echo "${INIT_OPERATOR_IMAGES}" | jq -r '.versions[].matrix.operator[].imagePath')
# we use the starting image from the same repo so we don't need to use initImage option
if [[ "$(echo ${TARGET_IMAGE} | cut -d'/' -f1)" == "perconalab" ]]; then
	IMAGE="${IMAGE/percona\//perconalab\/}"
fi
IMAGE_MONGOD=$(echo "${INIT_OPERATOR_IMAGES}" | jq -r '.versions[].matrix.mongod[].imagePath')
IMAGE_PMM=$(echo "${INIT_OPERATOR_IMAGES}" | jq -r '.versions[].matrix.pmm[].imagePath')
IMAGE_BACKUP=$(echo "${INIT_OPERATOR_IMAGES}" | jq -r '.versions[].matrix.backup[].imagePath')

if [[ ${TARGET_OPERATOR_VER} == "${INIT_OPERATOR_VER}" ]]; then
	echo "OPERATOR VERSION and INIT OPERATOR VERSION variables are the same: ${TARGET_OPERATOR_VER} ${INIT_OPERATOR_VER}! Something is wrong!"
	exit 1
fi

function compare_generation() {
	local generation="$1"
	local resource="${2:-statefulset}"
	local name="$3"
	local current_generation

	current_generation=$(kubectl_bin get "${resource}" "${name}" -o jsonpath='{.metadata.generation}')
	if [[ ${generation} != "${current_generation}" ]]; then
		echo "Generation for resource type ${resource} with name ${name} is: ${current_generation}, but should be: ${generation}!"
		exit 1
	fi
}

function wait_cluster_consistency() {
	local retry=0
	until [[ "$(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.status.state}')" == "ready" &&
	"$(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.status.replsets.rs0.ready}')" == "${CLUSTER_SIZE}" ]]; do
		let retry+=1
		if [ $retry -ge 32 ]; then
			echo max retry count $retry reached. something went wrong with operator or kubernetes cluster
			exit 1
		fi
		echo 'waiting for cluster readyness'
		sleep 20
	done
}

function check_applied_images() {
	local updated_image="$1"

	case "${updated_image}" in
		"operator")
			if [[ ${TARGET_IMAGE} == $(kubectl_bin get pod ${OPERATOR_NS:+-n $OPERATOR_NS} --selector=name="${OPERATOR_NAME}" -o jsonpath='{.items[*].spec.containers[?(@.name == "'"${OPERATOR_NAME}"'")].image}') &&
			${IMAGE_BACKUP} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.backup.image}') &&
			${IMAGE_PMM} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.pmm.image}') &&
			${IMAGE_MONGOD} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.image}') ]]; then
				: Operator image has been updated correctly
			else
				echo 'Operator image has not been updated'
				exit 1
			fi
			;;
		"all")
			if [[ ${TARGET_IMAGE} == $(kubectl_bin get pod ${OPERATOR_NS:+-n $OPERATOR_NS} --selector=name="${OPERATOR_NAME}" -o jsonpath='{.items[*].spec.containers[?(@.name == "'"${OPERATOR_NAME}"'")].image}') &&
			${TARGET_IMAGE_BACKUP} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.backup.image}') &&
			${TARGET_IMAGE_PMM} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.pmm.image}') &&
			${TARGET_IMAGE_MONGOD} == $(kubectl_bin get psmdb "${cluster}" -o jsonpath='{.spec.image}') ]]; then
				: Cluster images have been updated correctly
			else
				echo 'Cluster images have not been updated'
				exit 1
			fi
			;;
	esac
}

function prepare_cr_yaml() {
	local cr_yaml="$1"

	# spinup function expects images to have suffix like "-backup"
	# to replace them with images from environment variables
	curl -s "https://raw.githubusercontent.com/percona/percona-server-mongodb-operator/${GIT_TAG}/deploy/cr.yaml" \
		| yq eval '
			.metadata.name = "'${cluster}'" |
			.spec.upgradeOptions.apply = "disabled" |
			.spec.replsets[].size = '${CLUSTER_SIZE}' |
			.spec.replsets[].arbiter.enabled = false |
			.spec.backup.enabled = true |
			.spec.backup.pitr.enabled = false |
			.spec.backup.storages.minio.type = "s3" |
			.spec.backup.storages.minio.s3.credentialsSecret = "minio-secret" |
			.spec.backup.storages.minio.s3.region = "us-east-1" |
			.spec.backup.storages.minio.s3.bucket = "operator-testing" |
			.spec.backup.storages.minio.s3.endpointUrl = "http://minio-service:9000/" |
			.spec.sharding.enabled = false |
			.spec.image="" | .spec.image tag="!!null" |
			.spec.backup.image = "-backup" |
			.spec.pmm.image = "-pmm"' >"${cr_yaml}"
}

function main() {
	rbac="rbac"
	if [ -n "$OPERATOR_NS" ]; then
		rbac="cw-rbac"
	fi
	create_infra_gh "${namespace}" "${GIT_TAG}"
	apply_s3_storage_secrets
	deploy_minio

	desc 'create secrets and start client'
	curl -s "https://raw.githubusercontent.com/percona/percona-server-mongodb-operator/${GIT_TAG}/deploy/secrets.yaml" >"${tmp_dir}/secrets.yaml"
	kubectl_bin apply -f "${conf_dir}/client.yml" \
		-f "${tmp_dir}/secrets.yaml"

	local cr_yaml="${tmp_dir}/cr_${GIT_TAG}.yaml"
	prepare_cr_yaml "${cr_yaml}"

	desc 'create first PSMDB cluster'
	apply_cluster "${cr_yaml}"

	desc 'check if Pod is started'
	wait_for_running "${cluster}-rs0" "${CLUSTER_SIZE}"
	sleep 20

	desc 'create user myApp'
	run_mongo 'db.createUser({user: "myApp", pwd: "myPass", roles: [{ db: "myApp", role: "readWrite" }]})' \
		"userAdmin:userAdmin123456@${cluster}-rs0.${namespace}"

	desc 'write data'
	run_mongo 'use myApp\n db.test.insert({ x: 100500 })' "myApp:myPass@${cluster}-rs0.${namespace}"

	desc 'check if cr and statefulset created with expected config'
	compare_generation "1" "statefulset" "${cluster}-rs0"
	compare_generation "1" "psmdb" "${cluster}"

	desc "create backup $backup_name_minio"
	backup_name_minio="backup-minio"
	run_backup minio
	wait_backup "$backup_name_minio"

	desc 'upgrade operator'
	kubectl_bin apply --server-side --force-conflicts -f "${src_dir}/deploy/crd.yaml"
	kubectl_bin apply -f "${src_dir}/deploy/${rbac}.yaml" ${OPERATOR_NS:+-n $OPERATOR_NS}
	kubectl_bin patch deployment "${OPERATOR_NAME}" \
		-p'{"spec":{"template":{"spec":{"containers":[{"name":"'"${OPERATOR_NAME}"'","image":"'"${TARGET_IMAGE}"'"}]}}}}' ${OPERATOR_NS:+-n $OPERATOR_NS}
	kubectl_bin rollout status deployment/"${OPERATOR_NAME}" ${OPERATOR_NS:+-n $OPERATOR_NS}

	desc 'wait for operator upgrade'
	until [[ $(kubectl_bin get pods ${OPERATOR_NS:+-n $OPERATOR_NS} --selector=name="${OPERATOR_NAME}" \
		-o custom-columns='NAME:.metadata.name,IMAGE:.spec.containers[0].image' \
		| grep -vc 'NAME' | awk '{print $1}') -eq 1 ]]; do
		sleep 5
	done
	sleep 10

	desc 'check images and generation after operator upgrade'
	wait_for_running "${cluster}-rs0" "${CLUSTER_SIZE}"
	check_applied_images "operator"
	compare_generation "1" "statefulset" "${cluster}-rs0"
	compare_generation "1" "psmdb" "${cluster}"

	desc 'patch psmdb images and upgrade'
	kubectl_bin patch psmdb "${cluster}" --type=merge --patch '{
        "spec": {
            "crVersion": "'"${TARGET_OPERATOR_VER}"'",
            "image": "'"${TARGET_IMAGE_MONGOD}"'",
            "pmm": { "image": "'"${TARGET_IMAGE_PMM}"'" },
            "backup": { "image": "'"${TARGET_IMAGE_BACKUP}"'" }
        }}'
	sleep 10

	desc 'check cluster after full upgrade'
	wait_for_running "${cluster}-rs0" "${CLUSTER_SIZE}"
	wait_cluster_consistency "${cluster}"
	simple_data_check "${cluster}-rs0" "${CLUSTER_SIZE}"
	check_applied_images "all"
	compare_generation "2" "statefulset" "${cluster}-rs0"
	compare_generation "2" "psmdb" "${cluster}"

	desc 'drop collection and do restore with new version'
	run_mongo 'use myApp\n db.test.drop()' "myApp:myPass@${cluster}-rs0.${namespace}"

	backup_dest_minio=$(get_backup_dest "$backup_name_minio")
	kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
		/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
		/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://operator-testing/${backup_dest_minio}/rs0/ \
		| grep myApp.test.gz

	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@${cluster}-rs0.${namespace}"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-rs0.$namespace" "-2nd" ".svc.cluster.local" "myApp" "test"
	run_restore "$backup_name_minio"
	wait_restore "$backup_name_minio" "${cluster}"
	simple_data_check "${cluster}-rs0" "${CLUSTER_SIZE}"

	desc 'cleanup'
	destroy "${namespace}"

	desc 'test passed'
}

main
