#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

function check_telemetry_transfer() {

	local cr_vs_uri=${1}
	local cr_vs_channel=${2:-"disabled"}
	local telemetry_state=${3:-"enabled"}

	desc 'create PSMDB minimal cluster'
	cluster="minimal-cluster"

	kubectl_bin apply -f $conf_dir/client.yml
	yq w $conf_dir/secrets.yml 'metadata.name' "${cluster}" | kubectl_bin apply -f -

	yq r ${src_dir}/deploy/cr-minimal.yaml \
		| yq w - 'spec.upgradeOptions.versionServiceEndpoint' "${cr_vs_uri}" \
		| yq w - 'spec.upgradeOptions.apply' ${cr_vs_channel} \
		| yq w - 'spec.initImage' $IMAGE \
		| yq w - "spec.crVersion" "9.9.9" \
		| $sed -e "s#image:\$#image: $IMAGE_MONGOD#" \
		| $sed -e "s#image:.*-pmm\$#image: $IMAGE_PMM#" \
		| $sed -e "s#image:.*-backup\$#image: $IMAGE_BACKUP#" \
		| $sed -e "s#image: .*-mongod[34].*#image: $IMAGE_MONGOD#" \
		| $sed -e "s#image: .*-mongodb:[34].*#image: $IMAGE_MONGOD#" \
		| kubectl_bin apply -f -

	desc 'check if Pod is started'
	wait_for_running "${cluster}-rs0" 1
	sleep 20
	compare_kubectl "statefulset/${cluster}-rs0"

	desc 'write data'
	run_mongo 'db.createUser({user: "myApp", pwd: "myPass", roles: [{ db: "myApp", role: "readWrite" }]})' \
		"userAdmin:userAdmin123456@${cluster}-rs0.${namespace}"

	run_mongo 'use myApp\n db.test.insert({ x: 100500 })' "myApp:myPass@${cluster}-rs0.${namespace}"

	compare_kubectl "statefulset/${cluster}-rs0"

	kubectl_bin logs $(kubectl get pods --selector=run=version-service-cr -o jsonpath='{.items[0].metadata.name}') \
		| grep -E 'server request payload|unary call' \
		| grep -Eo '\{.*\}' \
		| jq 'del(."grpc.request.content".msg.customResourceUid)' \
		| jq 'del(."grpc.request.content".msg.kubeVersion)' \
		| jq 'del(."grpc.start_time")' \
		| jq 'del(."grpc.time_ms")' \
			>${tmp_dir}/${telemetry_state}_telemetry.version-service-cr.log.json

	kubectl_bin logs $(kubectl get pods --selector=run=version-service -o jsonpath='{.items[0].metadata.name}') \
		| grep -E 'server request payload|unary call' \
		| grep -Eo '\{.*\}' \
		| jq 'del(."grpc.request.content".msg.customResourceUid)' \
		| jq 'del(."grpc.request.content".msg.kubeVersion)' \
		| jq 'del(."grpc.start_time")' \
		| jq 'del(."grpc.time_ms")' \
			>${tmp_dir}/${telemetry_state}_telemetry.version-service.log.json

	diff ${test_dir}/compare/${telemetry_state}_telemetry.version-service.log.json <(grep -f ${tmp_dir}/${telemetry_state}_telemetry.version-service.log.json ${test_dir}/compare/${telemetry_state}_telemetry.version-service.log.json)

	[[ ${telemetry_state} == "disabled" && ${cr_vs_channel} == "recommended" ]] \
		&& diff -u ${tmp_dir}/enabled_telemetry.version-service-cr.log.json ${test_dir}/compare/enabled_telemetry.version-service-cr.log.json \
		|| diff ${test_dir}/compare/${telemetry_state}_telemetry.version-service-cr.log.json <(grep -f ${tmp_dir}/${telemetry_state}_telemetry.version-service-cr.log.json ${test_dir}/compare/${telemetry_state}_telemetry.version-service-cr.log.json)

	kubectl_bin delete pod ${OPERATOR_NS:+-n $OPERATOR_NS} $(get_operator_pod)
	kubectl_bin patch psmdb minimal-cluster --type=merge -p '{"metadata":{"finalizers":["delete-psmdb-pvc"]}}'
	kubectl_bin delete psmdb --all
	kubectl_bin delete deploy psmdb-client
	sleep 30

}

create_infra $namespace

desc 'install version service'
kubectl_bin create configmap ${OPERATOR_NS:+-n $OPERATOR_NS} versions \
	--from-file $test_dir/conf/operator.9.9.9.psmdb-operator.dep.json \
	--from-file $test_dir/conf/operator.9.9.9.psmdb-operator.json

kubectl_bin apply ${OPERATOR_NS:+-n $OPERATOR_NS} -f $test_dir/conf/vs.yml
sleep 10
$sed 's/version-service/version-service-cr/g' "${test_dir}/conf/vs.yml" \
	| yq w - -d0 'spec.template.spec.containers[0].image' $(yq r -d0 "${test_dir}/conf/vs.yml" 'spec.template.spec.containers[0].image') \
	| kubectl_bin apply ${OPERATOR_NS:+-n $OPERATOR_NS} -f -

kubectl_bin -n $namespace set env deploy/percona-server-mongodb-operator PERCONA_VS_FALLBACK_URI=http://version-service:11000
sleep 30

desc "Enable telemetry on operator level"
kubectl_bin get deployment/percona-server-mongodb-operator -o yaml -n ${namespace} \
	| yq --style double w - 'spec.template.spec.containers.(name==percona-server-mongodb-operator).env.(name==DISABLE_TELEMETRY).value' 'false' \
	| kubectl_bin apply -f -

wait_deployment 'percona-server-mongodb-operator'

check_telemetry_transfer "http://version-service-cr:11000" "disabled" "enabled"

desc "Disabling telemetry on the operator level"
kubectl_bin delete pod -l run=version-service-cr
kubectl_bin delete pod -l run=version-service

kubectl_bin get deployment/percona-server-mongodb-operator -o yaml -n ${namespace} \
	| yq --style double w - 'spec.template.spec.containers.(name==percona-server-mongodb-operator).env.(name==DISABLE_TELEMETRY).value' 'true' \
	| kubectl_bin apply -f -

wait_deployment 'percona-server-mongodb-operator'
check_telemetry_transfer "http://version-service-cr:11000" "recommended" "disabled"
check_telemetry_transfer "http://version-service-cr:11000" "disabled" "disabled"

cases=("version-service-exact" "version-service-recommended" "version-service-latest" "version-service-major" "version-service-unreachable")
expected_images=("percona/percona-server-mongodb:4.4.8-9" "percona/percona-server-mongodb:5.0.7-6" "percona/percona-server-mongodb:5.0.10-9" "percona/percona-server-mongodb:4.4.13-13" "$IMAGE_MONGOD")

for i in "${!cases[@]}"; do
	desc "test ${cases[$i]}"

	cluster="${cases[$i]}"
	expected_image="${expected_images[$i]}"

	kubectl_bin apply -f $conf_dir/secrets.yml -f $conf_dir/client.yml

	desc 'create PSMDB cluster'
	tmp_file=$(mktemp)
	sed "s%#initImage%$IMAGE%g" "$test_dir/conf/${cluster}-rs0.yml" >"$tmp_file"

	desc 'create first PSMDB cluster'
	cat "$tmp_file" \
		| $sed -e "s#image:\$#image: $IMAGE_MONGOD#" \
		| $sed -e "s#image:.*-pmm\$#image: $IMAGE_PMM#" \
		| $sed -e "s#image:.*-backup\$#image: $IMAGE_BACKUP#" \
		| $sed -e "s#image: .*-mongod[34].*#image: $IMAGE_MONGOD#" \
		| $sed -e "s#image: .*-mongodb:[34].*#image: $IMAGE_MONGOD#" \
		| yq w - 'spec.backup.enabled' 'false' \
		| yq w - 'spec.backup.tasks' '[]' \
		| kubectl_bin apply -f -
	desc 'check if Pod is started'
	wait_for_running "${cluster}-rs0" 3
	sleep 20
	compare_kubectl "statefulset/${cluster}-rs0"
	desc 'write data'
	run_mongo 'db.createUser({user: "myApp", pwd: "myPass", roles: [{ db: "myApp", role: "readWrite" }]})' \
		"userAdmin:userAdmin123456@${cluster}-rs0.${namespace}"

	run_mongo 'use myApp\n db.test.insert({ x: 100500 })' "myApp:myPass@${cluster}-rs0.${namespace}"
	compare_kubectl "statefulset/${cluster}-rs0"

	pods=($(kubectl get pods -l app.kubernetes.io/name=percona-server-mongodb -o=name))
	if [ ${#pods[@]} -eq 0 ]; then
		echo "pods not found"
		exit 1
	fi

	for pod in "${pods[@]}"; do
		img=$(kubectl get $pod -o jsonpath='{.spec.containers[0].image}')
		if [ "$img" != "$expected_image" ]; then
			echo "image was not updated"
			exit 1
		fi
	done

	kubectl delete pod ${OPERATOR_NS:+-n $OPERATOR_NS} $(get_operator_pod)
	kubectl_bin delete psmdb --all
	sleep 10
done

destroy $namespace
