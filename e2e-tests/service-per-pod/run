#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

check_cr_config() {
	local cluster="$1"

	desc "create first PSMDB cluster $cluster"
	apply_cluster $test_dir/conf/$cluster.yml

	desc 'check if all 3 Pods started'
	wait_for_running $cluster 3 "false"

	desc 'check if service and statefulset created with expected config'
	compare_kubectl statefulset/$cluster
	compare_kubectl service/$cluster-0

	local URI="$(get_service_ip $cluster-0),$(get_service_ip $cluster-1),$(get_service_ip $cluster-2)"
	# Wait a bit longer for ELB availability on Openshift
	sleep 30

	desc 'create user myApp'
	run_mongo \
		'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$URI" \
		"mongodb" ":27017"
	sleep 10

	desc 'write data, read from all'
	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"myApp:myPass@$URI" \
		"mongodb" ":27017"
	sleep 10
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-0)" "" ":27017"
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-1)" "" ":27017"
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-2)" "" ":27017"

	desc 'add service-per-pod lebel and annotation'
	if [[ $cluster == "node-port-rs0" ]]; then
		old_node_port=$(kubectl_bin get svc node-port-rs0-0 -o 'jsonpath={.spec.ports[0].nodePort}')
		kubectl_bin patch psmdb node-port --type=json --patch '[
		{
			"op": "add",
			"path": "/spec/replsets/0/expose/serviceAnnotations",
			"value": {
				"test": "service-per-pod",
			}
		},
		{
			"op": "add",
			"path": "/spec/replsets/0/expose/serviceLabels",
			"value": {
				"test": "service-per-pod",
			}
		}]'
		sleep 5 # waiting for reconcile

		desc 'check if service created with expected config'
		compare_kubectl service/node-port-rs0-0 "-updated"
		current_node_port=$(kubectl_bin get svc node-port-rs0-0 -o 'jsonpath={.spec.ports[0].nodePort}')
		if [[ $current_node_port != "$old_node_port" ]]; then
			echo "Node port changed from ${old_node_port} to ${current_node_port}"
			exit 1
		fi
	fi

	desc "delete PSMDB cluster $cluster"
	kubectl_bin delete \
		-f $test_dir/conf/$cluster.yml
}

main() {
	deploy_cert_manager
	create_infra $namespace

	desc 'create secrets and start client'
	kubectl_bin apply \
		-f $conf_dir/client.yml \
		-f $conf_dir/secrets.yml

	desc 'check ClusterIP'
	check_cr_config "cluster-ip-rs0"

	desc 'check LoadBalancer'
	check_cr_config "local-balancer-rs0"

	desc 'check NodePort'
	check_cr_config "node-port-rs0"

	destroy $namespace

	desc 'test passed'
}

main
