#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator

deploy_minio

desc 'create first PSMDB cluster'
cluster="some-name-rs0"
kubectl_bin apply \
	-f "$conf_dir/secrets.yml" \
	-f "$conf_dir/client.yml"

apply_s3_storage_secrets
apply_cluster $test_dir/conf/$cluster.yml
desc 'check if all 3 Pods started'
wait_for_running $cluster 3

desc 'check if service and statefulset created with expected config'
compare_kubectl statefulset/$cluster

desc 'write data, read from all'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster.$namespace"
sleep 10 # for minikube
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

wait_backup_agent $cluster-0
wait_backup_agent $cluster-1
wait_backup_agent $cluster-2

backup_name_minio="backup-minio"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP" ]; then
	backup_name_aws="backup-aws-s3"
	backup_name_gcp="backup-gcp-cs"
fi

desc 'run backups'
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP" ]; then
	run_backup aws-s3
	run_backup gcp-cs
fi
run_backup minio

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP" ]; then
	wait_backup "$backup_name_aws"
	wait_backup "$backup_name_gcp"
fi
wait_backup "$backup_name_minio"

sleep 5

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP" ]; then
	desc 'check backup and restore -- aws-s3'
	backup_dest_aws=$(get_backup_dest "$backup_name_aws")
	curl -s "https://s3.amazonaws.com/operator-testing/${backup_dest_aws}_rs0.dump.gz" | gunzip >/dev/null
	run_restore $backup_name_aws 3
	wait_restore $backup_name_aws 3

	desc 'check backup and restore -- gcp-cs'
	backup_dest_gcp=$(get_backup_dest "$backup_name_gcp")
	curl -s "https://storage.googleapis.com/operator-testing/${backup_dest_gcp}_rs0.dump.gz" | gunzip >/dev/null
	run_restore $backup_name_gcp 3
	wait_restore $backup_name_gcp 3
fi

desc 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://operator-testing/${backup_dest_minio} \
	| grep ${backup_dest_minio}_rs0.dump.gz
run_restore $backup_name_minio 3
wait_restore $backup_name_minio 3

desc 'restore from backup source, with storageName -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
run_restore_backupsource "${backup_name_minio}-source-0" "$backup_dest_minio" "minio"
wait_restore "$backup_name_minio" 3

desc 'restore from backup source, no storageName -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
run_restore_backupsource "${backup_name_minio}-source-1" "$backup_dest_minio"
wait_restore "$backup_name_minio" 3

destroy $namespace
