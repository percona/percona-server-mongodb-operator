#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

run_recovery_check() {
	local backup=$1
	local cluster=$2

	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster.$namespace" "-2nd" ".svc.cluster.local" "myApp" "test"
	run_restore "$backup"
	wait_restore "$backup" "${cluster/-rs0/}"
	simple_data_check "$cluster" 3 0
}

run_recovery_check_bkp_source() {
	local backup=$1
	local backup_dest=$2
	local cluster=$3
	local source=$4

	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster.$namespace" "-2nd" ".svc.cluster.local" "myApp" "test"
	run_restore_backupsource "$source" "$backup_dest"
	wait_restore "$source" "${cluster/-rs0/}"
	simple_data_check "$cluster" 3 0
}

user_exists() {
	local username=$1
	run_mongo \
		"use myApp\n JSON.stringify(db.getUsers())" \
		"userAdmin:userAdmin123456@$cluster.$namespace" "" "" "--quiet" \
		| grep -v "switched to" \
		| jq "any(.[]; ._id=="myApp.$username")"
}

role_exists() {
	local role=$1
	run_mongo \
		"use myApp\n JSON.stringify(db.getRoles())" \
		"userAdmin:userAdmin123456@$cluster.$namespace" "" "" "--quiet" \
		| grep -v "switched to" \
		| jq "any(.[]; ._id=="myApp.$role")"
}

collection_exists() {
	local collection=$1
	run_mongo \
		"use myApp\n JSON.stringify(db.getCollectionNames())" \
		"myApp:myPass@$cluster.$namespace" "" "" "--quiet" \
		| grep -v "switched to" \
		| jq "index(\"$collection\") != null"
}

run_recovery_check_selective() {
	local backup=$1
	local cluster=$2
	local database=$3
	local collection=$4
	local with_users_and_roles=$5
	local username=$6
	local role=$7

	restore_name="restore-$backup-selective"

	run_mongo \
		"use myApp\n db.$collection.drop()" \
		"myApp:myPass@$cluster.$namespace"

	if [[ $(collection_exists "$collection") == "true" ]]; then
		echo "Collection $collection exists"
		exit 1
	fi

	yq "$test_dir/conf/restore.yml" \
		| yq ".metadata.name=\"$restore_name\"" \
		| yq ".spec.backupName=\"$backup\"" \
		| yq ".spec.selective.namespaces[0]=\"$database.test\"" \
		| yq ".spec.selective.withUsersAndRoles=$with_users_and_roles" \
		| kubectl_bin apply -f -

	wait_restore "$backup-selective" "${cluster/-rs0/}"

	if [[ $(collection_exists "$collection") == "true" ]]; then
		echo "Collection $collection exists"
		exit 1
	fi

	if [[ $with_users_and_roles == "true" ]]; then
		if [[ $(user_exists "$username") == "false" ]]; then
			echo "User $username doesn't exist"
			exit 1
		fi
		if [[ $(role_exists "$role") == "false" ]]; then
			echo "Role $role doesn't exist"
			exit 1
		fi
	elif [[ $with_users_and_roles == "false" ]]; then
		if [[ $(user_exists "$username") == "true" ]]; then
			echo "User $username exists"
			exit 1
		fi
		if [[ $(role_exists "$role") == "true" ]]; then
			echo "Role $role exists"
			exit 1
		fi
	fi
}

create_infra $namespace

deploy_minio

desc 'create secrets and start client'
cluster="some-name-rs0"
kubectl_bin apply \
	-f "$test_dir/conf/secrets.yml" \
	-f "$conf_dir/client.yml"

apply_s3_storage_secrets

desc "create first PSMDB cluster $cluster"
apply_cluster $test_dir/conf/$cluster.yml

desc 'check if all 3 Pods started'
wait_for_running $cluster 3

desc 'check if service and statefulset created with expected config'
compare_kubectl statefulset/$cluster

desc 'create user'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2

desc 'write data, read from all'
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster.$namespace"

run_mongo \
	'use myApp\n db.test2.insert({ x: 100501 })' \
	"myApp:myPass@$cluster.$namespace"

run_mongo \
	'use myApp\n db.test3.insert({ x: 100502 })' \
	"myApp:myPass@$cluster.$namespace"

custom_user_name="test1user"
custom_role_name="test1role"

run_mongo \
	'use myApp\n db.createUser({user: "'"$custom_user_name"'",pwd:"test1pass",roles:[]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"

run_mongo \
	'use myApp\n db.createRole({"role":"'"$custom_role_name"'", privileges:[],roles:[]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"

minikube_sleep
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

wait_backup_agent $cluster-0
wait_backup_agent $cluster-1
wait_backup_agent $cluster-2

backup_name_minio="backup-minio"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	backup_name_aws="backup-aws-s3"
	backup_name_gcp="backup-gcp-cs"
	backup_name_azure="backup-azure-blob"
fi

desc 'run backups'
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	run_backup aws-s3
	run_backup gcp-cs
	run_backup azure-blob
fi
run_backup "minio"

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	wait_backup "$backup_name_aws"
	wait_backup "$backup_name_gcp"
	wait_backup "$backup_name_azure"
fi
wait_backup "$backup_name_minio"

sleep 5

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	desc 'check backup and restore -- aws-s3'
	backup_dest_aws=$(get_backup_dest "$backup_name_aws")
	curl -s "https://s3.amazonaws.com/${backup_dest_aws}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_recovery_check "$backup_name_aws" "$cluster"

	desc 'check backup and restore -- gcp-cs'
	backup_dest_gcp=$(get_backup_dest "$backup_name_gcp")
	curl -s "https://storage.googleapis.com/${backup_dest_gcp}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_recovery_check "$backup_name_gcp" "$cluster"

	desc 'check backup and restore -- azure-blob'
	backup_dest_azure=$(get_backup_dest "$backup_name_azure")
	curl -s "${backup_dest_azure}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_recovery_check "$backup_name_azure" "$cluster"
fi

desc 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://${backup_dest_minio}/rs0/ \
	| grep myApp.test.gz
run_recovery_check "$backup_name_minio" "$cluster"

run_mongo \
	'use myApp\n db.dropUser("'"$custom_user_name"'")' \
	"userAdmin:userAdmin123456@$cluster.$namespace"

run_mongo \
	'use myApp\n db.dropRole("'"$custom_role_name"'")' \
	"userAdmin:userAdmin123456@$cluster.$namespace"

desc 'selective restore -- minio'
run_recovery_check_selective "$backup_name_minio" "$cluster" "myApp" "test2" "false" "$custom_user_name" "$custom_role_name"
kubectl_bin delete psmdb-restore "restore-$backup_name_minio-selective"

run_mongo \
	'use myApp\n db.test2.insert({ x: 100501 })' \
	"myApp:myPass@$cluster.$namespace"

desc 'selective restore with users and roles -- minio'
run_recovery_check_selective "$backup_name_minio" "$cluster" "myApp" "test2" "true" "$custom_user_name" "$custom_role_name"

desc 'restore from backup source, with storageName -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
run_recovery_check_bkp_source "$backup_name_minio" "$backup_dest_minio" "$cluster" "${backup_name_minio}-source-0"

desc 'restore from backup source, no storageName -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
run_recovery_check_bkp_source "$backup_name_minio" "$backup_dest_minio" "$cluster" "${backup_name_minio}-source-1"

desc 'delete backup and check if it is removed from bucket -- minio'
kubectl_bin delete psmdb-backup --all
backup_exists=$(kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://operator-testing/ \
	| grep -c ${backup_dest_minio} | cat)
if [[ $backup_exists -eq 1 ]]; then
	echo "Backup was not removed from bucket -- minio"
	exit 1
fi

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	check_backup_deletion "https://s3.amazonaws.com/${backup_dest_aws}" "aws-s3"
	check_backup_deletion "https://storage.googleapis.com/${backup_dest_gcp}" "gcp-cs"
	check_backup_deletion "${backup_dest_azure}" "azure-blob"
fi

desc 'checking backup deletion without cr'
run_backup minio
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	run_backup aws-s3
	run_backup gcp-cs
	run_backup azure-blob
fi

wait_backup "$backup_name_minio"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	wait_backup "$backup_name_aws"
	wait_backup "$backup_name_gcp"
	wait_backup "$backup_name_azure"
fi

kubectl_bin delete psmdb --all
sleep 60

desc 'delete backup and check if it is removed from bucket -- minio'
kubectl_bin delete psmdb-backup --all
backup_exists=$(kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://operator-testing/ \
	| grep -c ${backup_dest_minio} | cat)
if [[ $backup_exists -eq 1 ]]; then
	echo "Backup was not removed from bucket -- minio"
	exit 1
fi

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	check_backup_deletion "https://s3.amazonaws.com/${backup_dest_aws}" "aws-s3"
	check_backup_deletion "https://storage.googleapis.com/${backup_dest_gcp}" "gcp-cs"
	check_backup_deletion "${backup_dest_azure}" "azure-blob"
fi

desc 'check for passwords leak'
check_passwords_leak

destroy $namespace

desc 'test passed'
