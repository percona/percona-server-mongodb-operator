#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

function patch_pvc_request() {
	local cluster=$1
	local size=$2

	echo "Patching PVC request to ${size} in ${cluster}"

	kubectl_bin patch psmdb ${cluster} --type=json -p='[{"op": "replace", "path": "/spec/replsets/0/volumeSpec/persistentVolumeClaim/resources/requests/storage", "value":"'"${size}"'"}]'
}

function get_default_storageclass() {
	kubectl_bin get sc -o jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}'
}

function ensure_default_sc_allows_expansion() {
	local default_sc=$(get_default_storageclass)

    echo "Checking if default storageclass ${default_sc} allows volume expansion"

    local allowVolumeExpansion=$(kubectl_bin get sc -o jsonpath='{.items[?(@.metadata.name=="'"${default_sc}"'")].allowVolumeExpansion}')

	if [[ ${allowVolumeExpansion} != "true" ]]; then
		echo "Default storageclass ${default_sc} does not allow volume expansion"
		exit 0
	fi
}

function apply_resourcequota() {
    local quota=$1
    local default_sc=$(get_default_storageclass)

    echo "Applying resourcequota for default storageclass ${default_sc} with quota ${quota}"

	cat ${test_dir}/conf/resourcequota.yml \
		| sed "s/STORAGECLASS/${default_sc}/" \
		| sed "s/QUOTA/${quota}/" \
		| kubectl_bin apply -f -
}

function wait_cluster_status() {
	local cluster=$1
	local expected=$2

	echo -n "Waiting for psmdb/${cluster} status to be ${expected}"
	until [[ $(kubectl_bin get psmdb ${cluster} -o jsonpath='{.status.state}') == ${expected} ]]; do
		if [[ $retry -ge 60 ]]; then
			echo
			echo "psmdb/${cluster} did not reach ${expected} status, max retries exceeded"
			exit 1
		fi
		echo -n "."
		sleep 5

		retry=$((retry + 1))
	done

	echo
	echo "psmdb/${cluster} status is ${expected}"
}

set_debug

ensure_default_sc_allows_expansion

create_infra ${namespace}

desc 'create secrets and psmdb client'
kubectl_bin apply \
    -f $conf_dir/secrets.yml \
    -f $conf_dir/client.yml

desc 'create PSMDB cluster'
cluster="some-name"
spinup_psmdb "${cluster}-rs0" "$conf_dir/$cluster-rs0.yml"

patch_pvc_request "${cluster}" "2Gi"
wait_cluster_consistency "$cluster" 3 2
echo

for pvc in $(kubectl_bin get pvc -l app.kubernetes.io/component=mongod -o name); do
    retry=0
    echo -n "Waiting for pvc/${pvc} to be resized"
    until [[ $(kubectl_bin get ${pvc} -o jsonpath={.status.capacity.storage}) == "2Gi" ]]; do
        if [[ $retry -ge 60 ]]; then
            echo
            echo "pvc/${pvc} was not resized, max retries exceeded"
            exit 1
        fi
        echo -n "."
        sleep 5

        retry=$((retry + 1))
    done
    echo
    echo "pvc/${pvc} was resized"
done

desc 'create resourcequota'

# We're setting the quota to 7Gi, so we can only resize the first PVC to 3Gi
# the others should fail to resize due to the exceeded quota but operator should
# handle the error and keep the cluster ready

apply_resourcequota 7Gi
patch_pvc_request "${cluster}" "3Gi"
wait_cluster_consistency "$cluster" 3 2
echo

echo -n "Waiting for pvc/mongod-data-some-name-rs0-0 to be resized"
until [[ $(kubectl_bin get pvc mongod-data-some-name-rs0-0 -o jsonpath={.status.capacity.storage}) == "3Gi" ]]; do
	if [[ $retry -ge 60 ]]; then
		echo
		echo "pvc/mongod-data-some-name-rs0-0 was not resized, max retries exceeded"
		exit 1
	fi
	echo -n "."
	sleep 5

	retry=$((retry + 1))
done
echo
echo "pvc/mongod-data-some-name-rs0-0 was resized"

# We're setting the quota to 9Gi, so we can resize all PVCs to 3Gi

apply_resourcequota 9Gi
patch_pvc_request "${cluster}" "3Gi"
wait_cluster_consistency "$cluster" 3 2
echo
for pvc in $(kubectl_bin get pvc -l app.kubernetes.io/component=mongod -o name); do
    retry=0
    echo -n "Waiting for pvc/${pvc} to be resized"
    until [[ $(kubectl_bin get ${pvc} -o jsonpath={.status.capacity.storage}) == "3Gi" ]]; do
        if [[ $retry -ge 60 ]]; then
            echo
            echo "pvc/${pvc} was not resized, max retries exceeded"
            exit 1
        fi
        echo -n "."
        sleep 5

        retry=$((retry + 1))
    done
    echo
    echo "pvc/${pvc} was resized"
done

desc "test downscale"

# operator shouldn't try to downscale the PVCs and set status to error
patch_pvc_request "${cluster}" "1Gi"
wait_cluster_status ${cluster} "error"

# user should be able to restore to the previous size and make the cluster ready
patch_pvc_request "${cluster}" "3Gi"
wait_cluster_status ${cluster} "ready"

destroy "${namespace}"
desc "test passed"
