#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

format_date() {
	local timestamp=$1
	echo $(TZ=UTC $date -d@${timestamp} '+%Y-%m-%d %H:%M:%S')
}

get_latest_oplog_chunk_ts() {
	local cluster=$1
	echo $(kubectl_bin exec $cluster-rs0-0 -c backup-agent -- pbm status -o json | jq '.backups.pitrChunks.pitrChunks | last | .range.end')
}

write_document() {
	local cmp_postfix="$1"

	desc 'write initial data, read from all'
	run_mongos \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"myApp:myPass@$cluster-mongos.$namespace"
	minikube_sleep
	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" ${cmp_postfix}
}

write_initial_data() {
	desc 'create user myApp'
	run_mongos \
		'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$cluster-mongos.$namespace"
	sleep 2
	write_document
}

run_backup() {
	local name=$1
	local idx=$2
	local type=$3

	desc "run backup $name-$idx"
	cat $test_dir/conf/$name.yml \
		| $sed -e "s/name:/name: $name-$idx/" \
		| $sed -e "s/type:/type: $type/" \
		| kubectl_bin apply -f -

	wait_backup "$name-$idx"

	sleep 5
}

check_recovery() {
	local backup_name=$1
	local restore_type=$2
	local restore_date=$3
	local cmp_postfix=$4
	local cluster_name=$5

	local latest_ts=$(get_latest_oplog_chunk_ts $cluster_name)

	desc "write more data before restore by $restore_type"
	run_mongos \
		'use myApp\n db.test.insert({ x: 100501 })' \
		"myApp:myPass@$cluster-mongos.$namespace"

	if [[ -n ${restore_date} ]]; then
		desc "Restoring to time $(format_date ${restore_date})"
		retries=0
		until [[ ${latest_ts} -gt ${restore_date} ]]; do
			if [[ $retries -gt 30 ]]; then
				echo "Last oplog chunk ($(format_date ${latest_ts})) is not greater than restore target ($(format_date ${restore_date}))"
				exit 1
			fi
			latest_ts=$(get_latest_oplog_chunk_ts $cluster_name)
			retries=$((retries + 1))
			echo "Waiting for last oplog chunk ($(format_date ${latest_ts})) to be greater than restore target ($(format_date ${restore_date}))"
			sleep 10
		done
	else
		desc "Restoring to latest"
		local current_ts=$(get_latest_oplog_chunk_ts $cluster_name)
		retries=0
		until [[ ${latest_ts} -gt ${current_ts} ]]; do
			if [[ $retries -gt 30 ]]; then
				echo "Last oplog chunk ($(format_date ${latest_ts})) is not greater than starting chunk ($(format_date ${current_ts}))"
				exit 1
			fi
			latest_ts=$(get_latest_oplog_chunk_ts $cluster_name)
			retries=$((retries + 1))
			echo "Waiting for last oplog chunk ($(format_date ${latest_ts})) to be greater than starting chunk ($(format_date ${current_ts}))"
			sleep 10
		done
	fi

	desc "check restore by $restore_type"
	cat $test_dir/conf/restore.yml \
		| $sed -e "s/name:/name: restore-$backup_name/" \
		| $sed -e "s/backupName:/backupName: $backup_name/" \
		| $sed -e "s/type:/type: $restore_type/" \
		| if [ -z "$restore_date" ]; then $sed -e "/date:/d"; else $sed -e "s/date:/date: $(format_date ${restore_date})/"; fi \
		| kubectl_bin apply -f -

	# fail faster if we don't reach requested status until some time
	wait_restore "$backup_name" "$cluster_name" "requested" "0" "900"
	echo
	wait_restore "$backup_name" "$cluster_name" "ready" "0" "1600"
	echo
	set -o xtrace

	wait_for_running $cluster-mongos 3
	sleep 10

	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" "$cmp_postfix"
}

main() {
	create_infra $namespace
	deploy_minio

	desc 'create secrets and start client'
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client.yml" \
		-f $conf_dir/minio-secret.yml

	cluster="some-name"
	desc "create first PSMDB cluster $cluster"
	apply_cluster $test_dir/conf/$cluster-rs0.yml

	desc 'check if all 3 Pods started'
	wait_for_running $cluster-rs0 3
	wait_for_running $cluster-cfg 3 "false"
	sleep 10

	write_initial_data

	wait_backup_agent $cluster-rs0-0
	wait_backup_agent $cluster-rs0-1
	wait_backup_agent $cluster-rs0-2
	wait_backup_agent $cluster-rs1-0
	wait_backup_agent $cluster-rs1-1
	wait_backup_agent $cluster-rs1-2
	wait_backup_agent $cluster-rs2-0
	wait_backup_agent $cluster-rs2-1
	wait_backup_agent $cluster-rs2-2

	# PBM doesn't start PiTR routine if there's no logical backup in storage
	backup_name_minio="backup-minio"

	# The sleep is needed to workaround a bug in PBM, check PBM-1265 for more info
	sleep 360

	run_backup $backup_name_minio 1 physical

	write_document "-2nd"

	backup_last_write=$(kubectl_bin exec $cluster-rs0-0 -c backup-agent -- pbm status -o json | jq .backups.snapshot[0].restoreTo)
	last_chunk=$(get_latest_oplog_chunk_ts $cluster)

	retries=0
	until [[ ${last_chunk} -gt ${backup_last_write} ]]; do
		if [[ $retries -gt 30 ]]; then
			echo "Last oplog chunk ($(format_date ${last_chunk})) is not greater than last write ($(format_date ${backup_last_write}))"
			exit 1
		fi
		last_chunk=$(get_latest_oplog_chunk_ts $cluster)
		retries=$((retries + 1))
		echo "Waiting for last oplog chunk ($(format_date ${last_chunk})) to be greater than last write ($(format_date ${backup_last_write}))"
		sleep 10
	done

	check_recovery $backup_name_minio-1 date "${last_chunk}" "-2nd" "$cluster"

	run_backup $backup_name_minio 3 physical
	compare_latest_restorable_time "${cluster}-rs0" "${backup_name_minio}-3"

	check_recovery $backup_name_minio-3 latest "" "-3rd" "$cluster"

	destroy $namespace
	desc 'test passed'
}

main
