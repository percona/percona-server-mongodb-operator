#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

write_document() {
	local cmp_postfix="$1"

	desc 'write initial data, read from all'
	run_mongos \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"myApp:myPass@$cluster-mongos.$namespace"
	minikube_sleep
	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" ${cmp_postfix}
}

write_initial_data() {
	desc 'create user myApp'
	run_mongos \
		'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$cluster-mongos.$namespace"
	sleep 2
	write_document
}

run_backup() {
	local name=$1
	local idx=$2
	local type=$3

	desc "run backup $name-$idx"
	cat $test_dir/conf/$name.yml \
		| $sed -e "s/name:/name: $name-$idx/" \
		| $sed -e "s/type:/type: $type/" \
		| kubectl_bin apply -f -

	wait_backup "$name-$idx"

	sleep 5
}

check_recovery() {
	local backup_name=$1
	local restore_type=$2
	local restore_date=$3
	local cmp_postfix=$4
	local cluster_name=$5

	desc "write more data before restore by $restore_type"
	run_mongos \
		'use myApp\n db.test.insert({ x: 100501 })' \
		"myApp:myPass@$cluster-mongos.$namespace"

	kubectl exec -it some-name-rs0-0 -c backup-agent -- pbm status

	desc 'waiting for chunks to be uploaded'
	sleep 150

	kubectl exec -it some-name-rs0-0 -c backup-agent -- pbm status

	desc "check restore by $restore_type"
	cat $test_dir/conf/restore.yml \
		| $sed -e "s/name:/name: restore-$backup_name/" \
		| $sed -e "s/backupName:/backupName: $backup_name/" \
		| $sed -e "s/type:/type: $restore_type/" \
		| if [ -z "$restore_date" ]; then $sed -e "/date:/d"; else $sed -e "s/date:/date: $restore_date/"; fi \
		| kubectl_bin apply -f -

	wait_restore "$backup_name" "$cluster_name" "ready" "1" "1000"
	echo
	set -o xtrace

	wait_for_running $cluster-mongos 3
	sleep 10

	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" "$cmp_postfix"
}

main() {
	create_infra $namespace
	deploy_minio

	desc 'create secrets and start client'
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client.yml" \
		-f $conf_dir/minio-secret.yml

	cluster="some-name"
	desc "create first PSMDB cluster $cluster"
	apply_cluster $test_dir/conf/$cluster-rs0.yml

	desc 'check if all 3 Pods started'
	wait_for_running $cluster-rs0 3
	wait_for_running $cluster-cfg 3 "false"
	sleep 10

	write_initial_data

	wait_backup_agent $cluster-rs0-0
	wait_backup_agent $cluster-rs0-1
	wait_backup_agent $cluster-rs0-2
	wait_backup_agent $cluster-rs1-0
	wait_backup_agent $cluster-rs1-1
	wait_backup_agent $cluster-rs1-2
	wait_backup_agent $cluster-rs2-0
	wait_backup_agent $cluster-rs2-1
	wait_backup_agent $cluster-rs2-2

	# PBM doesn't start PiTR routine if there's no logical backup in storage
	backup_name_minio="backup-minio"

	run_backup $backup_name_minio 0 logical
	run_backup $backup_name_minio 1 physical

	write_document "-2nd"
	sleep 2

	time_now=$(run_mongos 'new Date().toISOString()' "myApp:myPass@$cluster-mongos.$namespace" "mongodb" "" "--quiet" | grep -E -v 'I NETWORK|W NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match' | cut -c1-19 | tr T " ")

	check_recovery $backup_name_minio-1 date "$time_now" "-2nd" "$cluster"

	run_backup $backup_name_minio 2 logical
	run_backup $backup_name_minio 3 physical

	check_recovery $backup_name_minio-3 latest "" "-3rd" "$cluster"

	destroy $namespace
	desc 'test passed'
}

main
