#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

check_cr_config() {
	local cluster="$1"

	# apply cr config
	apply_cluster $test_dir/conf/$cluster.yml

	# check if at least 1 Pod started
	wait_pod $cluster-arbiter-0
	wait_for_running $cluster 2 "false"

	# check if statefulset created with expected config
	compare_kubectl statefulset/$cluster-arbiter

	# wait for convergence
	local arbiter_ip=$(get_service_ip $cluster-arbiter-0)
	local URI="$(get_service_ip $cluster-0),$(get_service_ip $cluster-1),$(get_service_ip $cluster-arbiter-0)"
	sleep 240

	# check arbiter liveness
	if [[ $(kubectl_bin get pod \
		--selector=statefulset.kubernetes.io/pod-name="${cluster}-arbiter-0" \
		-o jsonpath='{.items[*].status.containerStatuses[?(@.name == "mongod-arbiter")].restartCount}') -gt 0 ]]; then
		echo "Something went wrong with arbiter. Exiting..."
		exit 1
	fi

	run_mongo "rs.conf()" "clusterAdmin:clusterAdmin123456@$URI" "mongodb" ":27017" \
		| grep '"host" :' \
		| grep "$arbiter_ip"

	# check read and write
	run_mongo \
		'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$URI" \
		"mongodb" ":27017"
	sleep 2
	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"myApp:myPass@$URI" \
		"mongodb" ":27017"
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-0)" "" ":27017"
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-1)" "" ":27017"

	desc 'kill Primary Pod, check reelection, check data'
	initial_primary=$(get_mongo_primary "clusterAdmin:clusterAdmin123456@$URI" "$cluster")
	kubectl_bin delete pods $initial_primary
	sleep 10
	changed_primary=$(get_mongo_primary "clusterAdmin:clusterAdmin123456@$URI" "$cluster")
	[ "$initial_primary" != "$changed_primary" ]
	wait_for_running $cluster 2 false
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-0)" "" ":27017"
	compare_mongo_cmd "find" "myApp:myPass@$(get_service_ip $cluster-1)" "" ":27017"

	# delete cluster
	kubectl_bin delete \
		-f $test_dir/conf/$cluster.yml
}

main() {
	deploy_cert_manager
	create_namespace $namespace
	deploy_operator
	kubectl_bin apply \
		-f $conf_dir/client.yml \
		-f $conf_dir/secrets.yml

	desc 'check arbiter without service-per-pod'
	check_cr_config "arbiter-rs0"

	# disable unstable "arbiter with ClusterIP" test
	#desc 'check arbiter with ClusterIP'
	#check_cr_config "arbiter-clusterip-rs0"

	destroy $namespace
}

main
