#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator
deploy_vault
deploy_minio

apply_s3_storage_secrets

desc 'create PSMDB cluster'

cluster="some-name"
kubectl_bin apply -f "$conf_dir/secrets.yml" -f "$conf_dir/client.yml"

apply_cluster "$test_dir/conf/$cluster.yml"
desc 'check if all 3 Pods started'
wait_for_running $cluster-rs0 3
wait_for_running $cluster-cfg 3 "false"
wait_for_running $cluster-mongos 3

compare_kubectl statefulset/$cluster-rs0
compare_kubectl statefulset/$cluster-cfg

desc 'write data'
run_mongos \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster-mongos.$namespace"
sleep 2
run_mongos \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster-mongos.$namespace"
compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace"
sleep 30

encrypted_cluster_log=$(kubectl_bin logs some-name-rs0-0 | grep -i "Encryption keys DB is initialized successfully")

echo "$encrypted_cluster_log"
if [ -z "$encrypted_cluster_log" ]; then
	echo "Cluster is not encrypted"
	exit 1
fi

apply_cluster "$test_dir/conf/$cluster-unencrypted.yml"
sleep 30
unencrypted_cluster_log=$(kubectl_bin logs some-name-rs0-2 | grep -i "This may be due to the database files being encrypted, being from an older version or due to corruption on disk")

if [ -z "$unencrypted_cluster_log" ]
then
  echo "Cluster is not encrypted"
  exit 1
fi
destroy_vault
destroy $namespace
