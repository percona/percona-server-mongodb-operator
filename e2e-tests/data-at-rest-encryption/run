#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_infra $namespace
deploy_vault
deploy_minio

apply_s3_storage_secrets

desc 'create PSMDB cluster'

cluster="some-name"
kubectl_bin apply -f "$conf_dir/secrets.yml" -f "$conf_dir/client.yml"

apply_cluster "$test_dir/conf/$cluster.yml"
desc 'check if all 3 Pods started'
wait_for_running $cluster-rs0 3
wait_for_running $cluster-cfg 3 "false"
wait_for_running $cluster-mongos 3

compare_kubectl statefulset/$cluster-rs0
compare_kubectl statefulset/$cluster-cfg

desc 'write data'
run_mongos \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster-mongos.$namespace"
sleep 2
run_mongos \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster-mongos.$namespace"
compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace"

desc 'run backups'

backup_name_minio="backup-minio"
backup_name_gcp="backup-gcp-cs"

run_backup minio
wait_backup "$backup_name_minio"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	run_backup gcp-cs

	wait_backup "$backup_name_gcp"
fi

sleep 5

desc 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls "s3://operator-testing/${backup_dest_minio}" \
	| grep "${backup_dest_minio}_rs0.dump.gz"
run_restore $backup_name_minio 3 1 "-mongos"
wait_restore $backup_name_minio 3 1 "-mongos"

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then

	desc 'check backup and restore -- gcp-cs'
	backup_dest_gcp=$(get_backup_dest "$backup_name_gcp")
	curl -s "https://storage.googleapis.com/operator-testing/${backup_dest_gcp}_rs0.dump.gz" | gunzip >/dev/null
	run_restore $backup_name_gcp 3 1 "-mongos"
	wait_restore $backup_name_gcp 3 1 "-mongos"

fi

desc 'Check logs that cluster encrypted'
encrypted_cluster_log=$(kubectl_bin logs some-name-rs0-0 -c mongod -n $namespace | grep -i "Encryption keys DB is initialized successfully")

echo "$encrypted_cluster_log"
if [ -z "$encrypted_cluster_log" ]; then
	echo "Cluster is not encrypted"
	exit 1
fi

desc "Check logs for unencrypted cluster"

apply_cluster "$test_dir/conf/$cluster-unencrypted.yml"
sleep 30

retry=0
unencrypted_cluster_log=""
until [ "$retry" -ge 10 ]; do
	unencrypted_cluster_log=$(kubectl_bin logs some-name-rs0-2 -c mongod -n $namespace | grep -i "This may be due to the database files being encrypted, being from an older version or due to corruption on disk")
	if [ -n "$unencrypted_cluster_log" ]; then
		echo "Cluster is not encrypted already"
		break
	elif [ $retry == 15 ]; then
		echo "Max retry count $retry reached. Cluster is still encrypted"
		exit 1
	else
		retry=$((retry + 1))
		sleep 15
		continue
	fi
done

destroy_vault
destroy $namespace
