#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

create_infra $namespace
deploy_vault
deploy_minio

apply_s3_storage_secrets

desc 'create secrets and start client'
kubectl_bin apply -f "$conf_dir/secrets.yml" -f "$conf_dir/client.yml"

cluster='some-name'
desc "create PSMDB cluster $cluster"
apply_cluster "$test_dir/conf/$cluster.yml"
desc 'check if all Pods started'
wait_for_running $cluster-rs0 3 "false"
wait_for_running $cluster-cfg 3 "false"
wait_for_running $cluster-mongos 3

desc 'check if service and statefulset created with expected config'
compare_kubectl statefulset/$cluster-rs0
compare_kubectl statefulset/$cluster-cfg

desc 'create user'
run_mongos \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster-mongos.$namespace"
sleep 2

desc 'write data, read it'
run_mongos \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster-mongos.$namespace"
compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace"

desc 'run backups'
backup_name_minio="backup-minio"
backup_name_gcp="backup-gcp-cs"

desc "run minio backup $backup_name_minio"
run_backup minio
wait_backup "$backup_name_minio"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	desc "run minio backup $backup_name_gcp"
	run_backup gcp-cs

	wait_backup "$backup_name_gcp"
fi

sleep 5

desc "check backup and restore -- minio"
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
retry 3 8 kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://${backup_dest_minio}/rs0/ \
	| grep myApp.test.gz
run_mongos 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster-mongos.$namespace"
compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" "-2nd"
run_restore "$backup_name_minio"
wait_restore "$backup_name_minio" "$cluster"
compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace"

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	desc 'check backup and restore -- gcp-cs'
	backup_dest_gcp=$(get_backup_dest "$backup_name_gcp")
	curl -s "https://storage.googleapis.com/${backup_dest_gcp}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_mongos 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster-mongos.$namespace"
	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace" "-2nd"
	run_restore "$backup_name_gcp"
	wait_restore "$backup_name_gcp" "$cluster"
	compare_mongos_cmd "find" "myApp:myPass@$cluster-mongos.$namespace"
fi

desc 'check logs that cluster encrypted'

if ! kubectl_bin logs ${cluster}-rs0-0 -c mongod | grep -i "Encryption keys DB is initialized successfully"; then
	echo "Cluster is not encrypted"
	exit 1
fi

log "psmdb/${cluster} is properly encrypted: OK"

desc "check logs for unencrypted cluster"

log "disabling encryption (this will cause pods to crash because data is already encrypted)"
apply_cluster "$test_dir/conf/$cluster-unencrypted.yml"

log "waiting for 30 seconds"
sleep 30

log "checking if encryption is disabled"
retry=0

encryption_disabled=0
while true; do
	for pod in $(kubectl_bin get pod -l app.kubernetes.io/component=cfg --no-headers | awk '{print $1}'); do
		log "checking pod/${pod} logs"

		if kubectl_bin logs ${pod} -c mongod | grep -i "This may be due to the database files being encrypted, being from an older version or due to corruption on disk"; then
			encryption_disabled=1
		fi
	done

	for pod in $(kubectl_bin get pod -l app.kubernetes.io/component=mongod --no-headers | awk '{print $1}'); do
		log "checking pod/${pod} logs"

		if kubectl_bin logs ${pod} -c mongod | grep -i "This may be due to the database files being encrypted, being from an older version or due to corruption on disk"; then
			encryption_disabled=1
		fi
	done

	if [[ ${encryption_disabled} == 1 ]]; then
		log "psmdb/${cluster} encryption is disabled: OK"
		break
	fi

	if [[ $retry == 15 ]]; then
		log "max retry count $retry reached. Cluster is still encrypted"
		exit 1
	else
		retry=$((retry + 1))
		log "(retry ${retry}) waiting for encryption to disabled"
		sleep 15
		continue
	fi
done

destroy_vault
destroy $namespace

desc 'test passed'
