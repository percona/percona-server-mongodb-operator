#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

run_backup() {
	local name=$1
	local idx=$2

	desc "run backup $name-$idx"
	cat $test_dir/conf/$name.yml \
		| $sed -e "s/name:/name: $name-$idx/" \
		| kubectl_bin apply -f -

	wait_backup "$name-$idx"

	sleep 5
}

main() {
	create_infra $namespace
	deploy_minio

	desc 'create secrets and start client'
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client.yml"
	apply_s3_storage_secrets

	desc 'create custom RuntimeClass'
	if version_gt "1.19" && [ $EKS -ne 1 ]; then
		cat "$conf_dir/container-rc.yaml" | $sed 's/docker/runc/g' | kubectl_bin apply -f -
	elif version_gt "1.24" && [ $EKS -eq 1 ]; then
		cat "$conf_dir/container-rc.yaml" | $sed 's/docker/runc/g' | kubectl_bin apply -f -
	else
		kubectl_bin apply -f "$conf_dir/container-rc.yaml"
	fi

	cluster="some-name"
	desc "create first PSMDB cluster $cluster"
	if [ $EKS -eq 0 ]; then
		apply_cluster $test_dir/conf/$cluster-rs0.yml
	else
		apply_cluster $test_dir/conf/eks-$cluster-rs0.yml
	fi

	desc 'check if all 3 Pods started'
	wait_for_running $cluster-rs0 3
	wait_for_running $cluster-cfg 3 "false"
	wait_cluster_consistency $cluster

	desc 'check if statefulset created with expected config'
	compare_kubectl statefulset/$cluster-rs0
	compare_kubectl statefulset/$cluster-rs1
	compare_kubectl statefulset/$cluster-rs2
	compare_kubectl statefulset/$cluster-cfg
	compare_kubectl statefulset/$cluster-mongos ""

	write_initial_data
	write_document

	wait_backup_agent $cluster-rs0-0
	wait_backup_agent $cluster-rs0-1
	wait_backup_agent $cluster-rs0-2
	wait_backup_agent $cluster-rs1-0
	wait_backup_agent $cluster-rs1-1
	wait_backup_agent $cluster-rs1-2
	wait_backup_agent $cluster-rs2-0
	wait_backup_agent $cluster-rs2-1
	wait_backup_agent $cluster-rs2-2

	local backup_name
	if [ $EKS -eq 0 ]; then
		backup_name="backup-minio"
	else
		kubectl_bin patch psmdb some-name --type=merge -p '{"spec":{"backup":{"pitr":{"enabled":true}}}}'
		kubectl_bin exec some-name-rs0-0 -it -c backup-agent -- pbm status
		exit_status=$?
		if [ $exit_status -gt 0 ]; then
			exit 1
		fi
		backup_name="backup-aws-s3"
	fi
	run_backup $backup_name 0
	compare_latest_restorable_time "${cluster}-rs0" "${backup_name}-0"

	write_document "-2nd"
	sleep 2

	time_now=$(run_mongos 'new Date().getTime() / 1000' "myApp:myPass@$cluster-mongos.$namespace" "mongodb" "" "--quiet" | grep -E -v 'I NETWORK|W NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match|Error saving history file:' | cut -d'.' -f1)

	check_recovery $backup_name-0 date "$time_now" "-2nd" "$cluster"
	run_backup $backup_name 1
	check_recovery $backup_name-1 latest "" "-3rd" "$cluster"
	compare_latest_restorable_time "${cluster}-rs0" "${backup_name}-1"

	desc 'delete custom RuntimeClass'
	kubectl_bin delete -f "$conf_dir/container-rc.yaml"
	destroy $namespace

	desc 'test passed'
}

main
