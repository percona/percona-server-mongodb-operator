#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

cluster="some-name"

run_recovery_check() {
	local cluster=$1
	local backup=$2
	local host=$3

	echo 'write data after backup'
	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "databaseAdmin:databaseAdmin123456@${host}"

	echo "restore to backup ${backup}"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@${host}" "-2nd"
	run_restore "${backup}"
	wait_restore "${backup}" "${cluster}"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@${host}"

	wait_cluster_consistency "${cluster}"
}

delete_cluster() {
	local cluster=$1

	echo "deleting cluster: ${cluster}"
	kubectl_bin delete psmdb ${cluster}
	wait_for_delete psmdb/${cluster}
	wait_for_delete pod/${cluster}-rs0-0
	kubectl delete secrets --all
}

test_override_host_after_deploy() {
	kubectl_bin apply \
		-f ${conf_dir}/secrets_with_tls.yml \
		-f ${conf_dir}/minio-secret.yml

	echo "creating PSMDB cluster: ${cluster}"
	apply_cluster ${test_dir}/conf/${cluster}.yml
	wait_for_running ${cluster}-rs0 3

	sleep 10

	echo "writing some data"
	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"databaseAdmin:databaseAdmin123456@${cluster}-rs0.${namespace}"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@${cluster}-rs0.${namespace}"

	run_backup "minio" "backup-minio-logical"
	wait_backup "backup-minio-logical"

	echo "creating external services"
	kubectl_bin apply -f ${test_dir}/conf/external-services.yml

	echo "patching PSMDB cluster with replsetOverrides: ${cluster}"
	sed "s/NAMESPACE/${namespace}/g" ${test_dir}/conf/${cluster}-overridden.yml > ${tmp_dir}/${cluster}-overridden.yml
	apply_cluster ${tmp_dir}/${cluster}-overridden.yml
	wait_for_cluster_state ${cluster} "ready"

	echo "checking if we can read existing data"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@external-rs0-0.${namespace}"

	run_recovery_check "${cluster}" "backup-minio-logical" "external-rs0-0.${namespace}"

	delete_cluster ${cluster}
}

test_deploy_with_host_overrides() {
	kubectl_bin apply \
		-f ${conf_dir}/secrets_with_tls.yml \
		-f ${conf_dir}/minio-secret.yml

	echo "creating external services"
	kubectl_bin apply -f ${test_dir}/conf/external-services.yml

	echo "creating PSMDB cluster: ${cluster}"
	sed "s/NAMESPACE/${namespace}/g" ${test_dir}/conf/${cluster}-overridden.yml > ${tmp_dir}/${cluster}-overridden.yml
	apply_cluster ${tmp_dir}/${cluster}-overridden.yml
	wait_for_running ${cluster}-rs0 3

	echo "writing some data"
	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"databaseAdmin:databaseAdmin123456@external-rs0-0.${namespace}"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@external-rs0-0.${namespace}"

	run_backup "minio" "backup-minio-physical" "physical"
	wait_backup "backup-minio-physical"
	run_recovery_check "${cluster}" "backup-minio-physical" "external-rs0-0.${namespace}"

	delete_cluster ${cluster}
}

test_override_priority() {
	kubectl_bin apply \
		-f ${conf_dir}/secrets_with_tls.yml \
		-f ${conf_dir}/minio-secret.yml

	echo "creating PSMDB cluster: ${cluster}"
	apply_cluster ${test_dir}/conf/${cluster}-override-priority.yml
	wait_for_running ${cluster}-rs0 3

	echo "writing some data"
	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"databaseAdmin:databaseAdmin123456@${cluster}-rs0.${namespace}"
	compare_mongo_cmd "find" "databaseAdmin:databaseAdmin123456@${cluster}-rs0.${namespace}"

	echo "checking member priorities"
	run_mongo \
		"rs.conf().members.map(m => m.priority)" \
		"databaseAdmin:databaseAdmin123456@${cluster}-rs0.${namespace}"  \
		| egrep -v 'I NETWORK|W NETWORK|F NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match|Error saving history file:' \
			> ${tmp_dir}/priorities.json
	diff -u ${test_dir}/compare/priorities.json ${tmp_dir}/priorities.json
	echo "member priorities are OK"

	delete_cluster ${cluster}
}

main() {
	create_infra ${namespace}
	kubectl_bin apply -f ${conf_dir}/client.yml

	deploy_minio

	desc "Case 1: Deploying a new cluster with hostname overrides"
	test_deploy_with_host_overrides
	desc "Case 1: PASSED"

	desc "Case 2: Patching a running cluster to override hostnames"
	test_override_host_after_deploy
	desc "Case 2: PASSED"

	desc "Case 3: Overriding member priorities"
	test_override_priority
	desc "Case 3: PASSED"

	desc "All cases PASSED"
}

main
