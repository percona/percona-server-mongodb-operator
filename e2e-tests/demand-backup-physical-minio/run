#!/bin/bash

set -o errexit

test_dir=$(realpath "$(dirname "$0")")
. "${test_dir}/../functions"
set_debug

create_infra "${namespace}"
deploy_minio
apply_s3_storage_secrets

desc 'Testing on not sharded cluster'

echo 'Creating PSMDB cluster'
cluster="some-name"
kubectl_bin apply -f "${test_dir}/conf/secrets.yml"
apply_cluster "${test_dir}/conf/${cluster}.yml"
kubectl_bin apply -f "${conf_dir}/client_with_tls.yml"

echo "check if all pods started"
wait_for_running ${cluster}-rs0 3
wait_cluster_consistency ${cluster}

sleep 60 # give time for resync to start

wait_for_pbm_operations ${cluster}

echo 'Writing test data'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@${cluster}-rs0.${namespace}"
sleep 1
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@${cluster}-rs0.${namespace}"
sleep 5
compare_mongo_cmd "find" "myApp:myPass@${cluster}-rs0-0.${cluster}-rs0.${namespace}"
compare_mongo_cmd "find" "myApp:myPass@${cluster}-rs0-1.${cluster}-rs0.${namespace}"
compare_mongo_cmd "find" "myApp:myPass@${cluster}-rs0-2.${cluster}-rs0.${namespace}"

echo 'Running backups'
backup_name_minio="backup-minio"
run_backup minio ${backup_name_minio} 'physical'
wait_backup "${backup_name_minio}"
check_backup_in_storage ${backup_name_minio} minio rs0

echo 'Drop collection'
run_mongo 'use myApp\n db.test.drop()' "myApp:myPass@${cluster}-rs0.${namespace}"
echo 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "${backup_name_minio}")
run_restore ${backup_name_minio}
run_recovery_check ${backup_name_minio}

desc 'Testing with arbiter and non-voting nodes'

apply_cluster "${test_dir}/conf/${cluster}-arbiter-nv.yml"
echo "check if all pods started"
wait_for_running ${cluster}-rs0 3
wait_cluster_consistency ${cluster}

echo 'Running backups'
backup_name_minio="backup-minio-arbiter-nv"
run_backup minio ${backup_name_minio} 'physical'
wait_backup "${backup_name_minio}"
check_backup_in_storage ${backup_name_minio} minio rs0

echo 'Drop collection'
run_mongo 'use myApp\n db.test.drop()' "myApp:myPass@${cluster}-rs0.${namespace}"
echo 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "${backup_name_minio}")
run_restore ${backup_name_minio}
run_recovery_check ${backup_name_minio} "_restore-arbiter-nv"

destroy "$namespace"

desc 'test passed'
