#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

create_infra $namespace

desc 'create secrets and start client'
kubectl_bin apply \
	-f $conf_dir/secrets.yml \
	-f $conf_dir/client.yml

cluster='some-name-rs0'
desc "create first PSMDB cluster $cluster"
apply_cluster $conf_dir/$cluster.yml

desc 'check if all 3 Pods started'
wait_for_running $cluster 3

desc 'create user myApp'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2

desc 'write data, read from all'
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

desc 'scale up from 3 to 5'
kubectl_bin patch psmdb ${cluster%%-rs0} \
	--type='json' \
	-p='[{"op": "replace", "path": "/spec/replsets/0/size", "value": 5}]'
desc 'check if all 5 Pods started'
wait_for_running $cluster 5

desc 'check if PVC created'
compare_kubectl pvc/mongod-data-$cluster-3
compare_kubectl pvc/mongod-data-$cluster-4

desc 'check data consistency for new Pods'
compare_mongo_cmd "find" "myApp:myPass@$cluster-3.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-4.$cluster.$namespace"

desc 'scale down from 5 to 3'
kubectl_bin patch psmdb ${cluster%%-rs0} \
	--type='json' \
	-p='[
		{"op": "replace", "path": "/spec/replsets/0/size", "value": 3}
		]'

desc 'check if Pod deleted'
wait_for_delete pod/$cluster-3
wait_for_delete pod/$cluster-4
wait_for_running $cluster 3

kubectl_bin delete psmdb --all
kubectl_bin delete pvc --all

sleep 30

desc 'check scaling on exposed cluster with unsafe config'
cat_config "$conf_dir/$cluster.yml" \
	| yq eval '.spec.allowUnsafeConfigurations=true' \
	| yq eval '.spec.replsets[0].expose.enabled=true' \
	| yq eval '.spec.replsets[0].expose.exposeType="ClusterIP"' \
	| kubectl_bin apply -f -
wait_for_running $cluster 3

desc 'check data consistency: write data, read from all'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"
desc 'scale up from 3 to 1'
kubectl_bin patch psmdb ${cluster%%-rs0} \
	--type='json' \
	-p='[
		{"op": "replace", "path": "/spec/replsets/0/size", "value": 1}
		]'
desc 'check if Pod deleted'
wait_for_delete pod/$cluster-1
wait_for_delete pod/$cluster-2
wait_for_running $cluster 1

desc 'scale up from 1 to 3'
kubectl_bin patch psmdb ${cluster%%-rs0} \
	--type='json' \
	-p='[{"op": "replace", "path": "/spec/replsets/0/size", "value": 3}]'
desc 'check if all 3 Pods started'
wait_for_running $cluster 3

destroy $namespace

desc 'test passed'
