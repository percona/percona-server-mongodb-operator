#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

write_document() {
	local cmp_postfix=$1

	run_mongo \
		'use myApp\n db.test.insert({ x: 100500 })' \
		"myApp:myPass@$cluster.$namespace"
	sleep 10 # for minikube
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "$cmp_postfix"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "$cmp_postfix"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "$cmp_postfix"
}

write_initial_data() {
	desc 'write initial data, read from all'
	run_mongo \
		'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$cluster.$namespace"
	sleep 2
	write_document
}

reset_collection() {
	desc 'reset data'
	run_mongo \
		'use myApp\n db.test.remove({})' \
		"myApp:myPass@$cluster.$namespace"
	sleep 2
	write_document
}

run_backup() {
	local name=$1
	local idx=$2

	desc "run backup $name-$idx"
	cat $test_dir/conf/$name.yml \
		| $sed -e "s/name:/name: $name-$idx/" \
		| kubectl_bin apply -f -
	wait_backup "$name-$idx"
}

check_recovery() {
	local backup_name=$1
	local restore_type=$2
	local restore_date=$3
	local cmp_postfix=$4
	local backupSource=$4

	desc "write more data before restore by $restore_type"
	sleep 60
	run_mongo \
		"use myApp\n db.test.insert({ x: 100501 })" \
		"myApp:myPass@$cluster.$namespace"

	desc 'waiting for chunks to be uploaded'
	sleep 600

	desc "check restore by $restore_type"
	if [ -z "$backupSource" ]; then
		cat $test_dir/conf/restore.yml \
			| $sed -e "s/name:/name: restore-$backup_name/" \
			| $sed -e "s/backupName:/backupName: $backup_name/" \
			| $sed -e "s/type:/type: $restore_type/" \
			| $sed -e "s/date:/date: $restore_date/" \
			| $sed -e "/backupSource/,+2d" \
			| kubectl_bin apply -f -
	else
		backup_dest=$(get_backup_dest "$backup_name")
		cat $test_dir/conf/restore.yml \
			| $sed -e "s/name:/name: restore-$backup_name/" \
			| $sed -e "/backupName/d" \
			| $sed -e "s/type:/type: $restore_type/" \
			| $sed -e "s/date:/date: $restore_date/" \
			| $sed -e "s/BACKUP-NAME/$backup_dest/" \
			| kubectl_bin apply -f -
	fi

	wait_restore_object "$backup_name"
	echo
	set -o xtrace

	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "$cmp_postfix"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "$cmp_postfix"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "$cmp_postfix"
}

main() {
	create_namespace $namespace
	deploy_operator
	deploy_minio

	desc 'create PSMDB cluster'
	cluster="some-name-rs0"
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client.yml" \
		-f $conf_dir/minio-secret.yml
	apply_cluster $test_dir/conf/$cluster.yml

	desc 'check if all 3 Pods started'
	wait_for_running $cluster 3

	desc 'check if service and statefulset created with expected config'
	compare_kubectl statefulset/$cluster

	write_initial_data

	wait_backup_agent $cluster-0
	wait_backup_agent $cluster-1
	wait_backup_agent $cluster-2

	backup_name_minio="backup-minio"

	run_backup $backup_name_minio 0

	write_document "-2nd"
	sleep 2

	time_now=$(run_mongo 'new Date().toISOString()' "myApp:myPass@$cluster.$namespace" "mongodb" "" "--quiet" | grep -E -v 'I NETWORK|W NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match' | cut -c1-19 | tr T " ")

	check_recovery $backup_name_minio-0 date "$time_now" "-2nd"

	run_backup $backup_name_minio 1

	check_recovery $backup_name_minio-1 latest "" "-3rd"

	desc 'restore pitr using backupSource'

	reset_collection

	run_backup $backup_name_minio 2

	time_now=$(run_mongo 'new Date().toISOString()' "myApp:myPass@$cluster.$namespace" "mongodb" "" "--quiet" | grep -E -v 'I NETWORK|W NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match' | cut -c1-19 | tr T " ")

	check_recovery "${backup_name_minio}-2" date "$time_now" "" backupSource

	run_backup $backup_name_minio 3

	check_recovery "${backup_name_minio}-3" latest "" "-4th" "" backupSource

	destroy $namespace
}

main
