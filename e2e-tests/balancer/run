#!/bin/bash

set -o errexit

test_dir=$(realpath "$(dirname "$0")")
. "${test_dir}/../functions"
set_debug

check_balancer() {
	local cluster=$1
	local expected=$2 # should be "true" (enabled) or "false" (disabled)
	local delay=${3:-"0"}
	local balancer_running

	log "sleeping for ${delay} seconds..."
	sleep ${delay}

	balancer_running=$(run_mongosh 'sh.getBalancerState()' "clusterAdmin:clusterAdmin123456@${cluster}-cfg.${namespace}" \
		| grep -E -v 'Warning|cfg' | grep -E 'true|false')

	echo -n "checking if balancer status is ${expected}..."
	if [[ $balancer_running != "$expected" ]]; then
		echo
		log "Unexpected output from \"sh.getBalancerState()\": $balancer_running"
		log "Expected: $expected"
		exit 1
	fi
	echo "OK"
}

check_backup_and_restore() {
	local cluster=$1
	local backup_suffix=$2
	local balancer_end_state=$3
	local backup_name="backup-minio-${backup_suffix}"

	log "running backup: ${backup_name}"
	run_backup "minio" "${backup_name}"
	wait_backup "${backup_name}" "requested"

	log "checking if balancer is disabled"
	check_balancer ${cluster} "false"

	wait_backup "${backup_name}" "ready"

	log "checking if balancer is ${balancer_end_state} after backup"
	check_balancer ${cluster} ${balancer_end_state} 10

	log "running restore: restore-${backup_name}"
	run_restore "${backup_name}"

	wait_restore ${backup_name} ${cluster} "requested" 0

	log "checking if balancer is disabled"
	check_balancer ${cluster} "false"

	wait_restore ${backup_name} ${cluster} "ready" 1

	log "checking if balancer is ${balancer_end_state} after restore"
	check_balancer ${cluster} ${balancer_end_state} 10
}

write_data() {
	local cluster=$1

	log 'create user'
	run_mongos \
		'db.createUser({user:"user",pwd:"pass",roles:[{db:"app",role:"readWrite"}]})' \
		"userAdmin:userAdmin123456@$cluster-mongos.$namespace" \
		"mongodb" ".svc.cluster.local" "--quiet" "27017" "mongosh"
	sleep 2

	log 'enable sharding'
	run_mongos \
		'sh.enableSharding("app")' \
		"clusterAdmin:clusterAdmin123456@$cluster-mongos.$namespace" \
		"mongodb" ".svc.cluster.local" "--quiet" "27017" "mongosh"
	sleep 2

	log 'shard collection'
	run_mongos \
		'sh.shardCollection("app.city", { _id: 1 } )' \
		"clusterAdmin:clusterAdmin123456@$cluster-mongos.$namespace" \
		"mongodb" ".svc.cluster.local" "--quiet" "27017" "mongosh"

	log 'write data (this can take some time, be patient)'
	run_script_mongos "${test_dir}/data.js" "user:pass@$cluster-mongos.$namespace" \
		"mongodb" ".svc.cluster.local" "--quiet" "mongosh"

}

main() {
	create_infra "$namespace"

	deploy_minio
	apply_s3_storage_secrets

	log 'create PSMDB cluster'
	cluster="some-name"
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client-70.yml"

	apply_cluster "$test_dir/conf/$cluster-rs0.yml"

	log 'check if cfg pods started'
	wait_for_running $cluster-cfg 3 "false"

	log 'check if all shards started'
	wait_for_running $cluster-rs0 3 "false"
	wait_for_running $cluster-rs1 3 "false"
	wait_for_running $cluster-rs2 3 "false"

	log 'check if mongos pods started'
	wait_for_running $cluster-mongos 3

	check_balancer ${cluster} "true" 10

	write_data ${cluster}

	check_backup_and_restore ${cluster} "0" "true"

	log 'disabling balancer'
	kubectl patch psmdb some-name --type=merge -p '{"spec":{"sharding":{"balancer":{"enabled":false}}}}'
	check_balancer ${cluster} "false" 10

	check_backup_and_restore ${cluster} "1" "false"

	log 'enabling balancer'
	kubectl patch psmdb some-name --type=merge -p '{"spec":{"sharding":{"balancer":{"enabled":true}}}}'
	check_balancer ${cluster} "true" 10

	destroy "$namespace"
}

main
