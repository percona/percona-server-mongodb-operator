#!/bin/bash

set -o errexit

test_dir=$(realpath "$(dirname "$0")")
. "${test_dir}/../functions"
set_debug

log() {
	echo "[$(date +%Y-%m-%dT%H:%M:%S%z)]" $*
}

check_balancer() {
	local cluster=$1
	local expected=$2 # should be "true" (enabled) or "false" (disabled)
	local delay=${3:-"0"}
	local balancer_running

	log "sleeping for ${delay} seconds..."
	sleep ${delay}

	balancer_running=$(run_mongosh 'sh.getBalancerState()' "clusterAdmin:clusterAdmin123456@${cluster}-cfg.${namespace}" \
		| grep -E -v 'Warning|cfg' | grep -E 'true|false')

	echo -n "checking if balancer status is ${expected}..."
	if [[ $balancer_running != "$expected" ]]; then
		echo
		log "Unexpected output from \"sh.getBalancerState()\": $balancer_running"
		log "Expected: $expected"
		exit 1
	fi
	echo "OK"
}

check_backup_and_restore() {
	local cluster=$1
	local backup_suffix=$2
	local balancer_end_state=$3
	local backup_name="backup-minio-${backup_suffix}"

	log "running backup: ${backup_name}"
	run_backup "minio" "${backup_name}"
	wait_backup "${backup_name}" "requested"

	log "checking if balancer is disabled"
	check_balancer ${cluster} "false"

	wait_backup "${backup_name}" "ready"

	log "checking if balancer is ${balancer_end_state} after backup"
	check_balancer ${cluster} ${balancer_end_state} 10

	log "running restore: restore-${backup_name}"
	run_restore "${backup_name}"
	log "checking if balancer status is not changed"
	check_balancer ${cluster} "${balancer_end_state}" 4

	wait_restore ${backup_name} ${cluster} "ready"

	log "checking if balancer is ${balancer_end_state} after restore"
	check_balancer ${cluster} ${balancer_end_state} 10
}

main() {
	create_infra "$namespace"

	deploy_minio
	apply_s3_storage_secrets

	desc 'create first PSMDB cluster'
	cluster="some-name"
	kubectl_bin apply \
		-f "$conf_dir/secrets.yml" \
		-f "$conf_dir/client-70.yml"

	if version_gt "1.19" && [ $EKS -ne 1 ]; then
		$sed 's/docker/runc/g' "$conf_dir/container-rc.yaml" | kubectl_bin apply -f -
	elif version_gt "1.24" && [ $EKS -eq 1 ]; then
		$sed 's/docker/runc/g' "$conf_dir/container-rc.yaml" | kubectl_bin apply -f -
	else
		kubectl_bin apply -f "$conf_dir/container-rc.yaml"
	fi

	apply_cluster "$test_dir/conf/$cluster-rs0.yml"

	desc 'check if all 3 Pods started'
	wait_for_running $cluster-rs0 3 "false"
	wait_for_running $cluster-cfg 3 "false"
	wait_for_running $cluster-mongos 3
	check_balancer ${cluster} "true" 10

	check_backup_and_restore ${cluster} "0" "true"

	desc 'disabling balancer'
	kubectl patch psmdb some-name --type=merge -p '{"spec":{"sharding":{"balancer":{"enabled":false}}}}'
	check_balancer ${cluster} "false" 10

	check_backup_and_restore ${cluster} "1" "false"

	desc 'enabling balancer'
	kubectl patch psmdb some-name --type=merge -p '{"spec":{"sharding":{"balancer":{"enabled":true}}}}'
	check_balancer ${cluster} "true" 10

	destroy "$namespace"
}

main
