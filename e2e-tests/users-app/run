#!/bin/bash

set -o errexit

compare() {
	local database="$1"
	local command="$2"
	local uri="$3"
	local target="$4"

	run_mongo "use ${database}\n ${command}" "$uri" "mongodb" \
		| egrep -v 'I NETWORK|W NETWORK|F NETWORK|Error saving history file|Percona Server for MongoDB|connecting to:|Unable to reach primary for set|Implicit session:|versions do not match|Error saving history file:' \
		| $sed -re 's/ObjectId\("[0-9a-f]+"\)//; s/-[0-9]+.svc/-xxxesvc/' \
		| sed '/"userId"/d' \
			>$tmp_dir/${target}

	diff ${test_dir}/compare/${target}.json $tmp_dir/${target}
}

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

psmdb="some-name"
cluster="some-name-rs0"

create_infra $namespace

desc 'create secrets and start client'
kubectl_bin apply -f "${conf_dir}/client.yml" \
	-f "${conf_dir}/secrets.yml" \
	-f "${conf_dir}/minio-secret.yml"


desc "create first PSMDB cluster $cluster"
apply_cluster $test_dir/conf/$cluster.yml


desc 'Check if all 3 Pods started'
wait_for_running $cluster 3


desc 'check user created on cluster creation'
kubectl_bin apply -f "${test_dir}/conf/app-user-secrets.yml"
sleep 25

userOne="user-one"
userOnePass=$(getSecretData "user-one" "userOnePassKey")
check_mongo_auth "$userOne:$userOnePass@$cluster-0.$cluster.$namespace"


desc 'delete initial user from CR and create a new one'
kubectl_bin patch psmdb ${psmdb} --type=merge --patch '{
		"spec": {"users":[
			{
				"name":"user-two",
				"db":"admin",
				"passwordSecretRef": {
					"name": "user-two",
					"key": "userTwoPassKey"
				},
				"roles": [
					{"db":"admin","name":"userAdminAnyDatabase"}, 
					{"db":"admin","name":"clusterAdmin"}
				]
			}
		]}
	}'
wait_for_running $cluster 3

userTwo="user-two"
userTwoPass=$(getSecretData "user-two" "userTwoPassKey")

# Both users should be in the DB, the operator should not delete the user removed from the CR
check_mongo_auth "$userTwo:$userTwoPass@$cluster-0.$cluster.$namespace"
check_mongo_auth "$userOne:$userOnePass@$cluster-0.$cluster.$namespace"


# desc 'check password change'
# userTwoNewPass="new-user-two-password"
# patch_secret "user-two" "userTwoPassKey" "$(echo -n "$userTwoNewPass" | base64)"
# sleep 25

# check_mongo_auth "$userTwo:$userTwoNewPass@$cluster-0.$cluster.$namespace"


desc 'check role update from CR'

compare 'admin' 'db.getUser("user-two")' "userAdmin:userAdmin123456@$cluster.$namespace" "roles"

kubectl_bin patch psmdb ${psmdb} --type=merge --patch '{
		"spec": {"users":[
			{
				"name":"user-two",
				"db":"admin",
				"passwordSecretRef": {
					"name": "user-two",
					"key": "userTwoPassKey"
				},
				"roles": [
					{"db":"admin","name":"clusterAdmin"}
				]
			}
		]}
	}'
wait_for_running $cluster 3

compare 'admin' 'db.getUser("user-two")' "userAdmin:userAdmin123456@$cluster.$namespace" "updated-roles"


desc 'update user role via DB'

run_mongo \
	'use admin\n db.updateUser("user-two", { roles : [{ role : "userAdminAnyDatabase", db: "admin"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 15
compare 'admin' 'db.getUser("user-two")' "userAdmin:userAdmin123456@$cluster.$namespace" "updated-roles"


desc 'delete user from DB'
# user is recreated from CR


desc 'update user name via CR'
# new user is created in DB with the new name


desc 'update user DB via CR'
# new user is created with the new DB





destroy $namespace

desc 'test passed'
