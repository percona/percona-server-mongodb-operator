#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

label_node() {
	LABELED_NODE=$(kubectl_bin get nodes -o custom-columns=NAME:.metadata.name --no-headers=true | head -n1)

	desc 'add labels'
	kubectl_bin label nodes "${LABELED_NODE}" backupWorker=True --overwrite
}

unlabel_node() {
	desc 'remove labels'
	kubectl_bin label nodes "${LABELED_NODE}" backupWorker- --overwrite
}

create_infra "$namespace"
deploy_minio

label_node

desc 'create PriorityClass'
cat - <<-EOF | kubectl apply -f -
	        apiVersion: scheduling.k8s.io/v1
	        kind: PriorityClass
	        metadata:
	            name: high-priority
	        value: 1000000
	        globalDefault: false
	        description: "This priority class should be used for backup service pods only."
EOF

desc 'create secrets and start client'
kubectl_bin apply \
	-f "$conf_dir/secrets.yml" \
	-f "$conf_dir/client.yml"

apply_s3_storage_secrets

cluster="some-name-rs0"
desc "create first PSMDB cluster $cluster"
apply_cluster "$test_dir/conf/$cluster.yml"

desc 'check if all 3 Pods started'
wait_for_running $cluster 3

desc 'check if service and statefulset created with expected config'
compare_kubectl statefulset/$cluster

desc 'create user myApp'
run_mongo \
	'db.createUser({user:"myApp",pwd:"myPass",roles:[{db:"myApp",role:"readWrite"}]})' \
	"userAdmin:userAdmin123456@$cluster.$namespace"
sleep 2

desc 'write data, read from all'
run_mongo \
	'use myApp\n db.test.insert({ x: 100500 })' \
	"myApp:myPass@$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

wait_backup_agent $cluster-0
wait_backup_agent $cluster-1
wait_backup_agent $cluster-2

desc 'add backups schedule, wait for the first backup'
apply_cluster "$test_dir/conf/$cluster-2.yml"
sleep 55

apply_cluster "$test_dir/conf/$cluster.yml"
if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	backup_name_aws=$(kubectl_bin get psmdb-backup | grep aws-s3 | awk '{print$1}' | head -1)
	backup_name_gcp=$(kubectl_bin get psmdb-backup | grep gcp-cs | awk '{print$1}' | head -1)
	backup_name_azure=$(kubectl_bin get psmdb-backup | grep azure-blob | awk '{print$1}' | head -1)
	wait_backup "$backup_name_aws"
	wait_backup "$backup_name_gcp"
	wait_backup "$backup_name_azure"
fi

backup_name_minio=$(kubectl_bin get psmdb-backup | grep minio | awk '{print$1}' | head -1)
wait_backup "$backup_name_minio"

sleep 5

desc 'check backup and restore -- minio'
backup_dest_minio=$(get_backup_dest "$backup_name_minio")
kubectl_bin run -i --rm aws-cli --image=perconalab/awscli --restart=Never -- \
	/usr/bin/env AWS_ACCESS_KEY_ID=some-access-key AWS_SECRET_ACCESS_KEY=some-secret-key AWS_DEFAULT_REGION=us-east-1 \
	/usr/bin/aws --endpoint-url http://minio-service:9000 s3 ls s3://${backup_dest_minio}/rs0/ \
	| grep "myApp.test.gz"
run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "-2nd"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "-2nd"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "-2nd"
run_restore "$backup_name_minio"
wait_restore "$backup_name_minio" "${cluster/-rs0/}"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

if [ -z "$SKIP_BACKUPS_TO_AWS_GCP_AZURE" ]; then
	desc 'check backup and restore -- aws-s3'
	backup_dest_aws=$(get_backup_dest "$backup_name_aws")
	curl -s "https://s3.amazonaws.com/${backup_dest_aws}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "-2nd"
	run_restore "$backup_name_aws"
	wait_restore "$backup_name_aws" "${cluster/-rs0/}"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

	desc 'check backup and restore -- gcp-cs'
	backup_dest_gcp=$(get_backup_dest "$backup_name_gcp")
	curl -s "https://storage.googleapis.com/${backup_dest_gcp}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "-2nd"
	run_restore "$backup_name_gcp"
	wait_restore "$backup_name_gcp" "${cluster/-rs0/}"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

	desc 'check backup and restore -- azure-blob'
	backup_dest_azure=$(get_backup_dest "$backup_name_azure")
	curl -s "https://engk8soperators.blob.core.windows.net/${backup_dest_azure}/rs0/myApp.test.gz" | gunzip >/dev/null
	run_mongo 'use myApp\n db.test.insert({ x: 100501 })' "myApp:myPass@$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace" "-2nd"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace" "-2nd"
	run_restore "$backup_name_azure"
	wait_restore "$backup_name_azure" "${cluster/-rs0/}"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
	compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"
fi

desc 'add physical backup schedule, wait for the first backup'
apply_cluster "$test_dir/conf/$cluster-3.yml"

sleep 55

apply_cluster "$test_dir/conf/$cluster.yml"

backup_name_minio=$(kubectl_bin get psmdb-backup | grep minio | awk '{print $1}' | tail -1)
wait_backup "$backup_name_minio"

sleep 5

desc 'check backup and restore -- minio'
run_restore "$backup_name_minio" 3
wait_restore "$backup_name_minio" "${cluster/-rs0/}"
compare_mongo_cmd "find" "myApp:myPass@$cluster-0.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-1.$cluster.$namespace"
compare_mongo_cmd "find" "myApp:myPass@$cluster-2.$cluster.$namespace"

sleep 60 # give PBM resync some time

unlabel_node

destroy "$namespace"

desc 'test passed'
