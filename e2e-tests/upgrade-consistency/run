#!/bin/bash

set -o errexit

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions
set_debug

CLUSTER='some-name'

main() {
	create_infra $namespace

	desc 'create secrets and start client'
	kubectl_bin apply -f "${conf_dir}/client.yml" -f "${conf_dir}/secrets.yml"

	desc "create first PSMDB cluster 1.17.0 $CLUSTER"
	apply_cluster "$test_dir/conf/${CLUSTER}-rs0.yml"

	desc 'check if Pod started'
	wait_for_running "${CLUSTER}-rs0" "3" "true"

	desc 'check if service and statefulset created with expected config'
	compare_kubectl service/${CLUSTER}-rs0 "-1170"
	compare_kubectl statefulset/${CLUSTER}-rs0 "-1170"

	desc 'test 1.18.0'
	kubectl_bin patch psmdb "${CLUSTER}" --type=merge --patch '{
        "spec": {"crVersion":"1.18.0"}
    }'
	# Wait for at least one reconciliation
	sleep 10
	desc 'check if Pod started'
	wait_for_running "${CLUSTER}-rs0" "3" "true"

	desc 'check if service and statefulset created with expected config'
	compare_kubectl service/${CLUSTER}-rs0 "-1180"
	compare_kubectl statefulset/${CLUSTER}-rs0 "-1180"

	desc 'test 1.19.0'
	kubectl_bin patch psmdb "${CLUSTER}" --type=merge --patch '{
        "spec": {"crVersion":"1.19.0"}
    }'
	# Wait for at least one reconciliation
	sleep 10
	desc 'check if Pod started'
	wait_for_running "${CLUSTER}-rs0" "3" "true"

	desc 'check if service and statefulset created with expected config'
	compare_kubectl service/${CLUSTER}-rs0 "-1190"
	compare_kubectl statefulset/${CLUSTER}-rs0 "-1190"

	destroy $namespace

	desc 'test passed'
}

main
